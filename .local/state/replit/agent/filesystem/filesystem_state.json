{"file_contents":{"index.php":{"content":"<?php \n\r\nrequire_once 'app/init.php';\r\n\r\n$app = new App;","size_bytes":56},"app/database.php":{"content":"<?php\n/* database connection */\nfunction db_connect() {\n    try {\n        $dsn = 'mysql:host=' . DB_HOST . ';port=' . DB_PORT . ';dbname=' . DB_DATABASE . ';charset=utf8mb4';\n        $opts = [\n            PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,\n            PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,\n            PDO::ATTR_EMULATE_PREPARES => false,\n        ];\n        return new PDO($dsn, DB_USER, DB_PASS, $opts);\n    } catch (PDOException $e) {\n        http_response_code(500);\n        echo \"<h1>DB connection failed</h1><pre>\" . htmlspecialchars($e->getMessage()) . \"</pre>\";\n        exit;\n    }\n}\n","size_bytes":613},"app/init.php":{"content":"<?php\r\n\r\nerror_reporting(0);\r\nini_set('session.gc_maxlifetime', 28800);\r\nini_set('session.gc_probability', 1);\r\nini_set('session.gc_divisor', 1);\r\n$sessionCookieExpireTime = 28800; // 8hrs\r\nsession_set_cookie_params($sessionCookieExpireTime);\r\nsession_start();\r\n\r\nrequire_once 'core/App.php';\nrequire_once 'core/Controller.php';\nrequire_once 'core/config.php';\nrequire_once 'database.php';\n\n\r\n\r\n","size_bytes":395},"app/controllers/create.php":{"content":"<?php\n\nclass Create extends Controller {\n\n    public function index() {\t\t\n\t    $this->view('create/index');\n    }\n}\n","size_bytes":116},"app/controllers/essentials.php":{"content":"<?php\nclass essentials extends Controller {\n\n  private function requireAuth() {\n    if (!isset($_SESSION['auth'])) { header('Location: /login'); exit; }\n  }\n  private function tenantId(): int { return (int)($_SESSION['auth']['tenant_id'] ?? 1); }\n  private function userId(): int   { return (int)($_SESSION['auth']['id'] ?? 0); }\n\n  // GET /essentials\n  public function index() {\n    $this->requireAuth();\n    $dbh = db_connect();\n    $tenantId = $this->tenantId();\n\n    // filters\n    $from = $_GET['from'] ?? '';\n    $to   = $_GET['to'] ?? '';\n    $cat  = (array)($_GET['category'] ?? []);\n    $pm   = (array)($_GET['payment_method'] ?? []);\n    $tagId= $_GET['tag_id'] ?? '';\n\n    // data for selects\n    $categories = $dbh->query(\"SELECT * FROM categories WHERE active=1 ORDER BY id\")->fetchAll();\n    $pms = $dbh->query(\"SELECT * FROM payment_methods WHERE active=1 ORDER BY id\")->fetchAll();\n    $st = $dbh->prepare(\"SELECT * FROM tags WHERE tenant_id=? ORDER BY name\"); $st->execute([$tenantId]); $tags = $st->fetchAll();\n\n    // query list\n    $sql = \"SELECT e.*, c.name AS category_name, sc.name AS subcategory_name, pm.name AS payment_method_name\n            FROM expenses e\n            LEFT JOIN categories c ON c.id=e.category_id\n            LEFT JOIN subcategories sc ON sc.id=e.subcategory_id\n            LEFT JOIN payment_methods pm ON pm.id=e.payment_method_id\n            WHERE e.tenant_id = :tenant\";\n    $params = [':tenant'=>$tenantId];\n\n    if ($from !== '') { $sql .= \" AND e.date >= :from\"; $params[':from']=$from; }\n    if ($to !== '')   { $sql .= \" AND e.date <= :to\";   $params[':to']=$to; }\n\n    if (!empty($cat)) {\n      $in = implode(',', array_fill(0, count($cat), '?'));\n      $sql .= \" AND e.category_id IN ($in)\";\n    }\n\n    if ($tagId !== '') { $sql .= \" AND EXISTS (SELECT 1 FROM expense_tags et WHERE et.expense_id=e.id AND et.tag_id=:tag)\"; $params[':tag']=(int)$tagId; }\n\n    $sql .= \" ORDER BY e.date DESC, e.id DESC LIMIT 300\"; // simple cap\n    $st = $dbh->prepare($sql);\n\n    $i=1;\n    if (!empty($cat)) { foreach ($cat as $cid) { $st->bindValue($i++, (int)$cid, PDO::PARAM_INT); } }\n    foreach ($params as $k=>$v) {\n      if (in_array($k, [':tenant',':tag'])) $st->bindValue($k, (int)$v, PDO::PARAM_INT);\n      else $st->bindValue($k, $v);\n    }\n    $st->execute();\n    $rows = $st->fetchAll();\n\n    // post-filter payment method (keeps binding simple)\n    if (!empty($pm)) {\n      $set = array_flip(array_map('intval', $pm));\n      $rows = array_values(array_filter($rows, fn($r)=> $r['payment_method_id'] ? isset($set[(int)$r['payment_method_id']]) : false));\n    }\n\n    // render\n    $title = 'Essentials (Expenses)';\n    include 'app/views/essentials/index.php';\n  }\n\n  // GET /essentials/create\n  public function create() {\n    $this->requireAuth();\n    $dbh = db_connect();\n    $categories = $dbh->query(\"SELECT * FROM categories WHERE active=1 ORDER BY id\")->fetchAll();\n\n    $subRows = $dbh->query(\"SELECT * FROM subcategories WHERE active=1 ORDER BY category_id, name\")->fetchAll();\n    $subsByCat = [];\n    foreach ($subRows as $r) $subsByCat[$r['category_id']][] = $r;\n\n    $pms = $dbh->query(\"SELECT * FROM payment_methods WHERE active=1 ORDER BY id\")->fetchAll();\n    $title = 'Add Expense';\n    include 'app/views/essentials/create.php';\n  }\n\n  // POST /essentials/store\n  public function store() {\n    $this->requireAuth(); csrf_verify();\n    $dbh = db_connect();\n    $tenantId = $this->tenantId(); $userId = $this->userId();\n\n    $date = trim($_POST['date'] ?? '');\n    $amount = trim($_POST['amount'] ?? '');\n    $currency = strtoupper(trim($_POST['currency'] ?? 'CAD'));\n    $category_id = (int)($_POST['category_id'] ?? 0);\n    $subcategory_id = ($_POST['subcategory_id'] ?? '') !== '' ? (int)$_POST['subcategory_id'] : null;\n    $payment_method_id = ($_POST['payment_method_id'] ?? '') !== '' ? (int)$_POST['payment_method_id'] : null;\n    $merchant = mb_substr(trim($_POST['merchant'] ?? ''), 0, 64);\n    $note = mb_substr(trim($_POST['note'] ?? ''), 0, 255);\n    $tags = trim($_POST['tags'] ?? '');\n\n    if (!preg_match('/^\\d{4}-\\d{2}-\\d{2}$/',$date)) { $_SESSION['flash_error']='Invalid date.'; header('Location: /essentials/create'); exit; }\n    $cents = $this->toCents($amount);\n    if ($cents === null || $cents <= 0) { $_SESSION['flash_error']='Invalid amount.'; header('Location: /essentials/create'); exit; }\n    if ($category_id <= 0) { $_SESSION['flash_error']='Category required.'; header('Location: /essentials/create'); exit; }\n\n    $st = $dbh->prepare(\"INSERT INTO expenses\n      (tenant_id,user_id,date,amount_cents,currency,category_id,subcategory_id,payment_method_id,merchant,note,created_at,updated_at)\n      VALUES (?,?,?,?,?,?,?,?,?,?,NOW(),NOW())\");\n    $st->execute([$tenantId,$userId,$date,$cents,$currency,$category_id,$subcategory_id,$payment_method_id,$merchant,$note]);\n    $id = (int)$dbh->lastInsertId();\n\n    $this->summaryAdd($tenantId, $date, $category_id, $currency, $cents);\n\n    if ($tags !== '') $this->attachTags($dbh, $tenantId, $id, $tags);\n\n    $_SESSION['flash_ok']='Expense added.';\n    header('Location: /essentials'); exit;\n  }\n\n  // GET /essentials/edit/{id}\n  public function edit($id) {\n    $this->requireAuth();\n    $dbh = db_connect(); $tenantId=$this->tenantId(); $id=(int)$id;\n\n    $st = $dbh->prepare(\"SELECT * FROM expenses WHERE id=? AND tenant_id=? LIMIT 1\"); $st->execute([$id,$tenantId]);\n    $row = $st->fetch(); if (!$row) { http_response_code(404); $title='Not Found'; include 'app/views/errors/404.php'; return; }\n\n    $categories = $dbh->query(\"SELECT * FROM categories WHERE active=1 ORDER BY id\")->fetchAll();\n    $subRows = $dbh->query(\"SELECT * FROM subcategories WHERE active=1 ORDER BY category_id, name\")->fetchAll();\n    $subsByCat=[]; foreach ($subRows as $r) $subsByCat[$r['category_id']][]=$r;\n    $pms = $dbh->query(\"SELECT * FROM payment_methods WHERE active=1 ORDER BY id\")->fetchAll();\n\n    $st = $dbh->prepare(\"SELECT t.* FROM tags t INNER JOIN expense_tags et ON et.tag_id=t.id WHERE et.expense_id=? ORDER BY t.name\");\n    $st->execute([$id]); $rowTags=$st->fetchAll();\n\n    $title = 'Edit Expense';\n    include 'app/views/essentials/edit.php';\n  }\n\n  // POST /essentials/update/{id}\n  public function update($id) {\n    $this->requireAuth(); csrf_verify();\n    $dbh = db_connect(); $tenantId=$this->tenantId(); $id=(int)$id;\n\n    $st = $dbh->prepare(\"SELECT * FROM expenses WHERE id=? AND tenant_id=? LIMIT 1\"); $st->execute([$id,$tenantId]);\n    $existing = $st->fetch(); if (!$existing) { $_SESSION['flash_error']='Not found.'; header('Location: /essentials'); exit; }\n\n    $date = trim($_POST['date'] ?? '');\n    $amount = trim($_POST['amount'] ?? '');\n    $currency = strtoupper(trim($_POST['currency'] ?? 'CAD'));\n    $category_id = (int)($_POST['category_id'] ?? 0);\n    $subcategory_id = ($_POST['subcategory_id'] ?? '') !== '' ? (int)$_POST['subcategory_id'] : null;\n    $payment_method_id = ($_POST['payment_method_id'] ?? '') !== '' ? (int)$_POST['payment_method_id'] : null;\n    $merchant = mb_substr(trim($_POST['merchant'] ?? ''), 0, 64);\n    $note = mb_substr(trim($_POST['note'] ?? ''), 0, 255);\n    $tags = trim($_POST['tags'] ?? '');\n\n    if (!preg_match('/^\\d{4}-\\d{2}-\\d{2}$/',$date)) { $_SESSION['flash_error']='Invalid date.'; header('Location: /essentials/edit/'.$id); exit; }\n    $cents = $this->toCents($amount);\n    if ($cents === null || $cents <= 0) { $_SESSION['flash_error']='Invalid amount.'; header('Location: /essentials/edit/'.$id); exit; }\n    if ($category_id <= 0) { $_SESSION['flash_error']='Category required.'; header('Location: /essentials/edit/'.$id); exit; }\n\n    $st = $dbh->prepare(\"UPDATE expenses SET date=?, amount_cents=?, currency=?, category_id=?, subcategory_id=?, payment_method_id=?, merchant=?, note=?, updated_at=NOW()\n                         WHERE id=? AND tenant_id=?\");\n    $st->execute([$date,$cents,$currency,$category_id,$subcategory_id,$payment_method_id,$merchant,$note,$id,$tenantId]);\n\n    // update summaries (reverse old, add new if changed)\n    $this->summaryUpdate($tenantId, $existing, [\n      'date'=>$date,'amount_cents'=>$cents,'currency'=>$currency,'category_id'=>$category_id\n    ]);\n\n    // sync tags\n    $this->syncTags($dbh, $tenantId, $id, $tags);\n\n    $_SESSION['flash_ok']='Expense updated.';\n    header('Location: /essentials'); exit;\n  }\n\n  // POST /essentials/delete/{id}\n  public function delete($id) {\n    $this->requireAuth(); csrf_verify();\n    $dbh = db_connect(); $tenantId=$this->tenantId(); $id=(int)$id;\n\n    $st = $dbh->prepare(\"SELECT * FROM expenses WHERE id=? AND tenant_id=? LIMIT 1\");\n    $st->execute([$id,$tenantId]); $row=$st->fetch();\n\n    if ($row) {\n      $dbh->prepare(\"DELETE FROM expenses WHERE id=? AND tenant_id=?\")->execute([$id,$tenantId]);\n      $this->summaryAdd($tenantId, $row['date'], $row['category_id'], $row['currency'], -1*(int)$row['amount_cents']);\n      $_SESSION['flash_ok']='Expense deleted.';\n    }\n    header('Location: /essentials'); exit;\n  }\n\n  // GET /essentials/import\n  public function import() {\n    $this->requireAuth();\n    $title = 'Import Expenses (CSV)';\n    include 'app/views/essentials/import.php';\n  }\n\n  // POST /essentials/do_import\n  public function do_import() {\n    $this->requireAuth(); csrf_verify();\n    if (empty($_FILES['csv']['tmp_name'])) { $_SESSION['flash_error']='Choose a CSV file.'; header('Location: /essentials/import'); exit; }\n\n    $dbh = db_connect(); $tenantId=$this->tenantId(); $userId=$this->userId();\n    $fh = fopen($_FILES['csv']['tmp_name'], 'r'); if (!$fh) { $_SESSION['flash_error']='Cannot open CSV.'; header('Location:/essentials/import'); exit; }\n    $hdr = fgetcsv($fh); if (!$hdr) { $_SESSION['flash_error']='Empty CSV.'; header('Location:/essentials/import'); exit; }\n\n    $lower = array_map(fn($h)=> strtolower(trim($h)), $hdr);\n    $ix = fn($k)=> array_search($k,$lower);\n    $iDate=$ix('date'); $iAmt=$ix('amount'); $iCur=$ix('currency'); $iCat=$ix('category');\n    $iSub=$ix('subcategory'); $iPM=$ix('payment_method'); $iMer=$ix('merchant'); $iNote=$ix('note'); $iTags=$ix('tags');\n    if ($iDate===false || $iAmt===false || $iCat===false) { $_SESSION['flash_error']='CSV needs date, amount, category'; header('Location:/essentials/import'); exit; }\n\n    // category name -> id cache\n    $catMap = $this->categoryNameMap($dbh);\n\n    $total=0; $ok=0; $skip=0;\n    while (($row=fgetcsv($fh))!==false) {\n      $total++;\n      $date = trim($row[$iDate] ?? '');\n      $amountStr = trim($row[$iAmt] ?? '');\n      $currency = ($iCur!==false && !empty($row[$iCur])) ? strtoupper(trim($row[$iCur])) : 'CAD';\n      $catName = trim($row[$iCat] ?? '');\n      $subName = ($iSub!==false ? trim($row[$iSub] ?? '') : '');\n      $pmName  = ($iPM!==false ? trim($row[$iPM] ?? '') : '');\n      $merchant= ($iMer!==false ? trim($row[$iMer] ?? '') : '');\n      $note    = ($iNote!==false ? trim($row[$iNote] ?? '') : '');\n      $tags    = ($iTags!==false ? trim($row[$iTags] ?? '') : '');\n\n      if (!preg_match('/^\\d{4}-\\d{2}-\\d{2}$/',$date)) { $skip++; continue; }\n      $cents = $this->toCents($amountStr);\n      if ($cents===null || $cents<=0) { $skip++; continue; }\n\n      $catId = $catMap[strtolower($catName)] ?? null; if (!$catId) { $skip++; continue; }\n\n      $subId = null;\n      if ($subName !== '') {\n        $st = $dbh->prepare(\"SELECT id FROM subcategories WHERE category_id=? AND LOWER(name)=LOWER(?) LIMIT 1\");\n        $st->execute([$catId,$subName]); $s=$st->fetch(); $subId=$s ? (int)$s['id'] : null;\n      }\n\n      $pmId = null;\n      if ($pmName !== '') {\n        $m = ['cash'=>1,'debit'=>2,'credit'=>3,'e-transfer'=>4,'etransfer'=>4,'transfer'=>4,'other'=>5];\n        $pmId = $m[strtolower($pmName)] ?? null;\n      }\n\n      $st = $dbh->prepare(\"INSERT INTO expenses (tenant_id,user_id,date,amount_cents,currency,category_id,subcategory_id,payment_method_id,merchant,note,created_at,updated_at)\n                           VALUES (?,?,?,?,?,?,?,?,?,?,NOW(),NOW())\");\n      $st->execute([$tenantId,$userId,$date,$cents,$currency,$catId,$subId,$pmId,mb_substr($merchant,0,64),mb_substr($note,0,255)]);\n      $id = (int)$dbh->lastInsertId();\n\n      $this->summaryAdd($tenantId, $date, $catId, $currency, $cents);\n      if ($tags !== '') $this->attachTags($dbh, $tenantId, $id, $tags);\n\n      $ok++; if ($ok>=10000) break;\n    }\n    fclose($fh);\n    $_SESSION['flash_ok'] = \"Imported {$ok} rows. Skipped {$skip} of {$total}.\";\n    header('Location: /essentials'); exit;\n  }\n\n  // GET /essentials/reports/monthly\n  public function reports_monthly() {\n    $this->requireAuth();\n    $dbh = db_connect(); $tenantId=$this->tenantId();\n    $fromYm = $_GET['from'] ?? date('Y-m', strtotime('-5 months'));\n    $toYm   = $_GET['to'] ?? date('Y-m');\n    $currency = $_GET['currency'] ?? 'CAD';\n    $st = $dbh->prepare(\"SELECT * FROM monthly_expense_totals WHERE tenant_id=? AND year_month BETWEEN ? AND ? AND currency=? ORDER BY year_month, category_id\");\n    $st->execute([$tenantId,$fromYm,$toYm,$currency]); $rows=$st->fetchAll();\n    $cats = $dbh->query(\"SELECT * FROM categories WHERE active=1 ORDER BY id\")->fetchAll();\n    $title='Monthly totals';\n    include 'app/views/essentials/reports_monthly.php';\n  }\n\n  // GET /essentials/reports/trend\n  public function reports_trend() {\n    $this->requireAuth();\n    $dbh = db_connect(); $tenantId=$this->tenantId();\n    $fromYm = $_GET['from'] ?? date('Y-m', strtotime('-11 months'));\n    $toYm   = $_GET['to'] ?? date('Y-m');\n    $currency = $_GET['currency'] ?? 'CAD';\n    $st = $dbh->prepare(\"SELECT * FROM monthly_expense_totals WHERE tenant_id=? AND year_month BETWEEN ? AND ? AND currency=? ORDER BY year_month, category_id\");\n    $st->execute([$tenantId,$fromYm,$toYm,$currency]); $rows=$st->fetchAll();\n    $title='Trend';\n    include 'app/views/essentials/reports_trend.php';\n  }\n\n  /* ----------------- helpers ------------------ */\n  private function toCents(string $amount): ?int {\n    $amount = trim(str_replace([',',' '], ['',''], $amount));\n    if ($amount === '' || !preg_match('/^-?\\d+(\\.\\d{1,2})?$/', $amount)) return null;\n    $neg = $amount[0] === '-'; if ($neg) $amount = substr($amount,1);\n    if (strpos($amount, '.') === false) return ($neg?-1:1) * ((int)$amount * 100);\n    [$w,$f] = explode('.', $amount, 2); $f = str_pad($f,2,'0');\n    return ($neg?-1:1) * ((int)$w * 100 + (int)substr($f,0,2));\n  }\n  private function ym(string $date): string { return substr($date,0,7); }\n  private function summaryAdd(int $tenantId, string $date, int $catId, string $currency, int $delta): void {\n    $dbh = db_connect();\n    $st = $dbh->prepare(\"INSERT INTO monthly_expense_totals (tenant_id,year_month,category_id,currency,total_cents)\n                         VALUES (?,?,?,?,?)\n                         ON DUPLICATE KEY UPDATE total_cents = total_cents + VALUES(total_cents)\");\n    $st->execute([$tenantId,$this->ym($date),$catId,$currency,$delta]);\n  }\n  private function summaryUpdate(int $tenantId, array $old, array $new): void {\n    $oldYm = $this->ym($old['date']); $newYm = $this->ym($new['date']);\n    $dbh = db_connect();\n    if ($oldYm === $newYm && $old['category_id']==$new['category_id'] && $old['currency']===$new['currency']) {\n      $delta = (int)$new['amount_cents'] - (int)$old['amount_cents'];\n      if ($delta !== 0) $this->summaryAdd($tenantId, $new['date'], (int)$new['category_id'], $new['currency'], $delta);\n    } else {\n      $this->summaryAdd($tenantId, $old['date'], (int)$old['category_id'], $old['currency'], -1*(int)$old['amount_cents']);\n      $this->summaryAdd($tenantId, $new['date'], (int)$new['category_id'], $new['currency'], (int)$new['amount_cents']);\n    }\n  }\n  private function attachTags(PDO $dbh, int $tenantId, int $expenseId, string $csv): void {\n    foreach (explode(',', $csv) as $t) {\n      $name = trim($t); if ($name==='') continue;\n      $st = $dbh->prepare(\"SELECT id FROM tags WHERE tenant_id=? AND LOWER(name)=LOWER(?) LIMIT 1\");\n      $st->execute([$tenantId,$name]); $row=$st->fetch();\n      $tagId = $row ? (int)$row['id'] : (function($dbh,$tenantId,$name){ $x=$dbh->prepare(\"INSERT INTO tags (tenant_id,name) VALUES (?,?)\"); $x->execute([$tenantId,$name]); return (int)$dbh->lastInsertId();})($dbh,$tenantId,$name);\n      $dbh->prepare(\"INSERT IGNORE INTO expense_tags (expense_id,tag_id) VALUES (?,?)\")->execute([$expenseId,$tagId]);\n    }\n  }\n  private function syncTags(PDO $dbh, int $tenantId, int $expenseId, string $csv): void {\n    $want = [];\n    foreach (explode(',', $csv) as $t) { $t=trim($t); if ($t==='') continue;\n      $st=$dbh->prepare(\"SELECT id FROM tags WHERE tenant_id=? AND LOWER(name)=LOWER(?) LIMIT 1\");\n      $st->execute([$tenantId,$t]); $row=$st->fetch();\n      $want[] = $row ? (int)$row['id'] : (function($dbh,$tenantId,$t){ $x=$dbh->prepare(\"INSERT INTO tags (tenant_id,name) VALUES (?,?)\"); $x->execute([$tenantId,$t]); return (int)$dbh->lastInsertId();})($dbh,$tenantId,$t);\n    }\n    $want = array_values(array_unique($want));\n\n    $st = $dbh->prepare(\"SELECT tag_id FROM expense_tags WHERE expense_id=?\"); $st->execute([$expenseId]);\n    $cur = array_map('intval', array_column($st->fetchAll(),'tag_id'));\n\n    $toAdd = array_diff($want,$cur);\n    $toDel = array_diff($cur,$want);\n\n    foreach ($toAdd as $tid) $dbh->prepare(\"INSERT IGNORE INTO expense_tags (expense_id,tag_id) VALUES (?,?)\")->execute([$expenseId,(int)$tid]);\n    if ($toDel) {\n      $in = implode(',', array_fill(0, count($toDel), '?'));\n      $q  = $dbh->prepare(\"DELETE FROM expense_tags WHERE expense_id=? AND tag_id IN ($in)\");\n      $i=1; $q->bindValue($i++,$expenseId,PDO::PARAM_INT);\n      foreach ($toDel as $tid) $q->bindValue($i++,(int)$tid,PDO::PARAM_INT);\n      $q->execute();\n    }\n  }\n  private function categoryNameMap(PDO $dbh): array {\n    $rows = $dbh->query(\"SELECT id, name FROM categories\")->fetchAll();\n    $map = [];\n    foreach ($rows as $r) $map[strtolower($r['name'])]=(int)$r['id'];\n    // synonyms\n    $map['transport']=1; $map['transportation']=1;\n    $map['accommodation']=2; $map['housing']=2; $map['rent']=2;\n    $map['travel']=3; $map['entertainment']=3; $map['travel & entertainment']=3; $map['travel&ent']=3;\n    $map['health']=4; $map['medical']=4;\n    return $map;\n  }\n}\n","size_bytes":18252},"app/controllers/home.php":{"content":"<?php\r\n\r\nclass Home extends Controller {\r\n\r\n    public function index() {\n      $user = $this->model('User');\n      $data = $user->test();\n\t\t\t\r\n\t    $this->view('home/index');\r\n\t    die;\r\n    }\r\n\r\n}\r\n","size_bytes":200},"app/controllers/login.php":{"content":"<?php\n\nclass Login extends Controller {\n\n    public function index() {\t\t\n\t    $this->view('login/index');\n    }\n    \n    public function verify(){\n\t\t\t$email = $_REQUEST['email'];\n\t\t\t$password = $_REQUEST['password'];\n\t\t\n\t\t\t$user = $this->model('User');\n\t\t\t$user->authenticate($email, $password); \n    }\n\n}\n","size_bytes":306},"app/controllers/logout.php":{"content":"<?php\n\nclass Logout extends Controller {\n\n    public function index() {\t\t\n\t    session_start();\n        $_SESSION = array();\n        session_destroy();\n        header('location:/login');\n    }\n}","size_bytes":194},"app/controllers/register.php":{"content":"<?php\nclass register extends Controller {\n\n  private function db() { return db_connect(); }\n\n  // GET /register\n  public function index() {\n    // public page; if already logged in, bounce to home\n    if (isset($_SESSION['auth'])) { header('Location: /home'); exit; }\n    $title = 'Create Account';\n    require 'app/views/register/index.php';\n  }\n\n  // POST /register/store\n  public function store() {\n    if (isset($_SESSION['auth'])) { header('Location: /home'); exit; }\n    csrf_verify();\n\n    $name  = trim($_POST['name'] ?? '');\n    $email = trim($_POST['email'] ?? '');\n    $pass  = (string)($_POST['password'] ?? '');\n    $pass2 = (string)($_POST['password_confirm'] ?? '');\n\n    // basic validation\n    if ($name === '' || $email === '' || $pass === '' || $pass2 === '') {\n      $_SESSION['flash_error'] = 'All fields are required.';\n      header('Location: /register'); exit;\n    }\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n      $_SESSION['flash_error'] = 'Invalid email address.';\n      header('Location: /register'); exit;\n    }\n    if ($pass !== $pass2) {\n      $_SESSION['flash_error'] = 'Passwords do not match.';\n      header('Location: /register'); exit;\n    }\n    if (strlen($pass) < 8) {\n      $_SESSION['flash_error'] = 'Password must be at least 8 characters.';\n      header('Location: /register'); exit;\n    }\n\n    $dbh = $this->db();\n    // check if email taken\n    $st = $dbh->prepare(\"SELECT id FROM users WHERE email = ? LIMIT 1\");\n    $st->execute([$email]);\n    if ($st->fetch()) {\n      $_SESSION['flash_error'] = 'Email is already registered. Try logging in.';\n      header('Location: /register'); exit;\n    }\n\n    // create tenant + user in a transaction\n    $dbh->beginTransaction();\n    try {\n      // create a tenant per account (clean multi-tenant separation)\n      $tenantName = $name !== '' ? $name : $email;\n      $dbh->prepare(\"INSERT INTO tenants (name) VALUES (?)\")->execute([$tenantName]);\n      $tenantId = (int)$dbh->lastInsertId();\n\n      $hash = password_hash($pass, PASSWORD_BCRYPT);\n      $stmt = $dbh->prepare(\"INSERT INTO users (tenant_id, name, email, password_hash, role)\n                             VALUES (?, ?, ?, ?, 'user')\");\n      $stmt->execute([$tenantId, $name, $email, $hash]);\n\n      $userId = (int)$dbh->lastInsertId();\n      $dbh->commit();\n\n      // log the user in\n      $_SESSION['auth'] = [\n        'id' => $userId,\n        'tenant_id' => $tenantId,\n        'name' => $name,\n        'email' => $email,\n        'role' => 'user'\n      ];\n      $_SESSION['controller'] = 'home';\n      $_SESSION['method'] = 'index';\n\n      header('Location: /home'); exit;\n\n    } catch (Throwable $e) {\n      if ($dbh->inTransaction()) $dbh->rollBack();\n      $_SESSION['flash_error'] = 'Sign up failed. Please try again.';\n      // Optional: log $e->getMessage()\n      header('Location: /register'); exit;\n    }\n  }\n}\n","size_bytes":2881},"app/core/App.php":{"content":"<?php\r\n\r\nclass App {\r\n\r\n    protected $controller = 'login';\r\n    protected $method = 'index';\r\n    protected $special_url = ['apply'];\r\n    protected $params = [];\r\n\r\n    public function __construct() {\r\n        if (isset($_SESSION['auth']) == 1) {\r\n            //$this->method = 'index';\r\n            $this->controller = 'home';\r\n        } \r\n\r\n        // This will return a broken up URL\r\n        // it will be /controller/method\r\n        $url = $this->parseUrl();\r\n\r\n        /* if controller exists in the URL, then go to it\r\n         * if not, then go to this->controller which is defaulted to home \r\n         */\r\n\r\n        if (isset($url[1]) && file_exists('app/controllers/' . $url[1] . '.php')) {\r\n            $this->controller = $url[1];\r\n\r\n            $_SESSION['controller'] = $this->controller;\r\n\r\n            /* This is if we have a special URL in the index.\r\n             * For example, our apply page is public and in the index method\r\n             * We do not want the method to be login in this case, but instead index\r\n             * \r\n             */\r\n            if (in_array($this->controller, $this->special_url)) { \r\n              $this->method = 'index';\r\n            }\r\n            unset($url[1]);\r\n        } else {\r\n            header('Location: /home');\r\n            die;\r\n        }\r\n\r\n        require_once 'app/controllers/' . $this->controller . '.php';\r\n\r\n        $this->controller = new $this->controller;\r\n\r\n        // check to see if method is passed\r\n        // check to see if it exists\r\n        if (isset($url[2])) {\r\n            if (method_exists($this->controller, $url[2])) {\r\n                $this->method = $url[2];\r\n                $_SESSION['method'] = $this->method;\r\n                unset($url[2]);\r\n            }\r\n        }\r\n\r\n        // This will rebase the params to a new array (starting at 0)\r\n        // if params exist\r\n        $this->params = $url ? array_values($url) : [];\r\n        call_user_func_array([$this->controller, $this->method], $this->params);\t\t\r\n    }\r\n\r\n    public function parseUrl() {\r\n        $u = \"{$_SERVER['REQUEST_URI']}\";\r\n        //trims the trailing forward slash (rtrim), sanitizes URL, explode it by forward slash to get elements\r\n        $url = explode('/', filter_var(rtrim($u, '/'), FILTER_SANITIZE_URL));\r\n\t\tunset($url[0]);\r\n\t\treturn $url;\r\n    }\r\n\r\n}\r\n","size_bytes":2336},"app/core/Controller.php":{"content":"<?php\r\n\r\nclass Controller {\r\n    \r\n    public function model ($model) {\r\n        require_once 'app/models/' .$model . '.php';\r\n        return new $model();\r\n    }\r\n    \r\n    public function view ($view, $data = []) {\r\n        require_once 'app/views/' . $view .'.php';\r\n    }\r\n\r\n}\r\n","size_bytes":282},"app/core/config.php":{"content":"<?php\r\n\r\ndefine('VERSION', '0.7.0');\r\n\r\ndefine('DS', DIRECTORY_SEPARATOR);\r\ndefine('ROOT', dirname(__DIR__));\r\ndefine('APPS', ROOT . DS . 'app');\r\ndefine('CORE', ROOT . DS . 'core');\r\ndefine('LIBS', ROOT . DS . 'lib');\r\ndefine('MODELS', ROOT . DS . 'models');\r\ndefine('VIEWS', ROOT . DS . 'views');\r\ndefine('CONTROLLERS', ROOT . DS . 'controllers');\r\ndefine('LOGS', ROOT . DS . 'logs');\t\r\ndefine('FILES', ROOT . DS. 'files');\r\n\r\n// ---------------------  NEW DATABASE TABLE -------------------------\r\ndefine('DB_HOST',         'cyop7a.h.filess.io');\r\ndefine('DB_USER',         'LifeNav_schoolnest'); \r\ndefine('DB_PASS',         $_ENV['DB_PASS']);\r\ndefine('DB_DATABASE',     'LifeNav_schoolnest');\r\ndefine('DB_PORT',         '3306');","size_bytes":732},"app/models/Expense.php":{"content":"\n<?php require 'app/views/templates/header.php'; ?>\n\n<div class=\"container mt-3\">\n    <div class=\"d-flex justify-content-between align-items-center mb-3\">\n        <div>\n            <h3 class=\"m-0\">LifeNav</h3>\n            <div class=\"btn-group\" role=\"group\" aria-label=\"Mode Selection\">\n                <a href=\"/lifenav/normal\" class=\"btn <?= $mode === 'normal' ? 'btn-primary' : 'btn-outline-primary' ?>\">Normal</a>\n                <a href=\"/lifenav/travel\" class=\"btn <?= $mode === 'travel' ? 'btn-primary' : 'btn-outline-primary' ?>\">Travel</a>\n            </div>\n        </div>\n        <div class=\"d-flex align-items-center gap-2\">\n            <form method=\"post\" action=\"/lifenav/switch_currency\" class=\"d-inline-flex align-items-center gap-2\">\n                <?= csrf_field() ?>\n                <label class=\"form-label mb-0\">Currency:</label>\n                <input type=\"text\" name=\"currency\" value=\"<?= htmlspecialchars($currency) ?>\" maxlength=\"3\" class=\"form-control form-control-sm\" style=\"width: 70px;\">\n                <button type=\"submit\" class=\"btn btn-sm btn-outline-secondary\">Switch</button>\n            </form>\n            <a href=\"/lifenav/reports/monthly?mode=<?= $mode ?>\" class=\"btn btn-outline-info btn-sm\">Reports</a>\n        </div>\n    </div>\n\n    <?php if (!empty($_SESSION['flash_error'])): ?>\n        <div class=\"alert alert-danger\"><?= htmlspecialchars($_SESSION['flash_error']); unset($_SESSION['flash_error']); ?></div>\n    <?php endif; ?>\n    <?php if (!empty($_SESSION['flash_ok'])): ?>\n        <div class=\"alert alert-success\"><?= htmlspecialchars($_SESSION['flash_ok']); unset($_SESSION['flash_ok']); ?></div>\n    <?php endif; ?>\n\n    <?php foreach ($tabs as $tab): ?>\n        <div class=\"card mb-4\">\n            <div class=\"card-header\">\n                <h5 class=\"mb-0\"><?= htmlspecialchars($tab['name']) ?></h5>\n            </div>\n            <div class=\"card-body\">\n                <?php\n                $categories = [];\n                $st = db()->prepare(\"SELECT * FROM categories WHERE tab_id = ? AND (is_custom = 0 OR user_id = ?) AND active = 1 ORDER BY is_custom, name\");\n                $st->execute([$tab['id'], $userId]);\n                $categories = $st->fetchAll();\n\n                $userRowsForTab = $rowsByTab[$tab['id']] ?? [];\n                $activeCategories = array_column($userRowsForTab, 'category_id');\n                ?>\n\n                <div class=\"row g-2\">\n                    <?php foreach ($categories as $category): ?>\n                        <?php $isActive = in_array($category['id'], $activeCategories); ?>\n                        <?php if ($isActive): ?>\n                            <?php\n                            $userRow = array_filter($userRowsForTab, fn($r) => $r['category_id'] == $category['id'])[0];\n                            $total = number_format($userRow['current_total_cents'] / 100, 2);\n                            ?>\n                            <div class=\"col-auto\">\n                                <a href=\"/lifenav/category/<?= $userRow['id'] ?>\" class=\"btn btn-success position-relative\">\n                                    <?= htmlspecialchars($category['name']) ?>\n                                    <span class=\"position-absolute top-0 start-100 translate-middle badge rounded-pill bg-light text-dark\">\n                                        <?= $total ?> <?= htmlspecialchars($currency) ?>\n                                    </span>\n                                </a>\n                            </div>\n                        <?php else: ?>\n                            <div class=\"col-auto\">\n                                <form method=\"post\" action=\"/lifenav/select_category\" class=\"d-inline\">\n                                    <?= csrf_field() ?>\n                                    <input type=\"hidden\" name=\"mode\" value=\"<?= htmlspecialchars($mode) ?>\">\n                                    <input type=\"hidden\" name=\"tab_id\" value=\"<?= $tab['id'] ?>\">\n                                    <input type=\"hidden\" name=\"category_id\" value=\"<?= $category['id'] ?>\">\n                                    <button type=\"submit\" class=\"btn btn-outline-secondary\">\n                                        <?= htmlspecialchars($category['name']) ?>\n                                    </button>\n                                </form>\n                            </div>\n                        <?php endif; ?>\n                    <?php endforeach; ?>\n                </div>\n            </div>\n        </div>\n    <?php endforeach; ?>\n</div>\n\n<?php require 'app/views/templates/footer.php'; ?>\n","size_bytes":4597},"app/models/User.php":{"content":"<?php\n\nclass User {\n\n    public $username;\n    public $password;\n    public $auth = false;\n\n    public function __construct() {\n        \n    }\n\n    public function test () {\n      $db = db_connect();\n      $statement = $db->prepare(\"select * from users;\");\n      $statement->execute();\n      $rows = $statement->fetch(PDO::FETCH_ASSOC);\n      return $rows;\n    }\n\n    public function authenticate($email, $password) {\n        /*\n         * if email and password good then\n         * $this->auth = true;\n         */\n\t\t$email = strtolower($email);\n\t\t$db = db_connect();\n        $statement = $db->prepare(\"select * from users WHERE email = :email;\");\n        $statement->bindValue(':email', $email);\n        $statement->execute();\n        $rows = $statement->fetch(PDO::FETCH_ASSOC);\n\n\t\tif ($rows && password_verify($password, $rows['password_hash'])) {\n\t\t\t$_SESSION['auth'] = [\n\t\t\t\t'id' => $rows['id'],\n\t\t\t\t'tenant_id' => $rows['tenant_id'],\n\t\t\t\t'name' => $rows['name'],\n\t\t\t\t'email' => $rows['email'],\n\t\t\t\t'role' => $rows['role']\n\t\t\t];\n\t\t\tunset($_SESSION['failedAuth']);\n\t\t\theader('Location: /home');\n\t\t\tdie;\n\t\t} else {\n\t\t\tif(isset($_SESSION['failedAuth'])) {\n\t\t\t\t$_SESSION['failedAuth'] ++; //increment\n\t\t\t} else {\n\t\t\t\t$_SESSION['failedAuth'] = 1;\n\t\t\t}\n\t\t\theader('Location: /login');\n\t\t\tdie;\n\t\t}\n    }\n\n}","size_bytes":1303},"app/views/essentials/index.php":{"content":"\n<?php require 'app/views/templates/header.php'; ?>\n\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, viewport-fit=cover\">\n    <meta name=\"theme-color\" content=\"#1a1a1a\">\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">\n    <title>LifeNav - Financial Tracker</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\" integrity=\"sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\" />\n    <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap\" rel=\"stylesheet\">\n    <script src=\"https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@babel/standalone@7.23.2/babel.min.js\"></script>\n    <style>\n        :root {\n            --primary: #2c6b5f;\n            --primary-dark: #1f4b43;\n            --primary-light: #e6f0ee;\n            --secondary: #5c6b7a;\n            --accent: #d97706;\n            --background: #f9fafb;\n            --card: #ffffff;\n            --text: #111827;\n            --text-light: #6b7280;\n            --border: #d1d5db;\n            --success: #059669;\n            --warning: #d97706;\n            --danger: #dc2626;\n            --shadow-sm: 0 2px 4px rgba(0, 0, 0, 0.05);\n            --shadow-md: 0 4px 12px rgba(0, 0, 0, 0.08);\n            --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n            --radius-sm: 0.5rem;\n            --radius-md: 0.75rem;\n            --radius-lg: 1rem;\n            --font-sans: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, sans-serif;\n            --safe-area-inset-top: env(safe-area-inset-top, 0);\n            --safe-area-inset-bottom: env(safe-area-inset-bottom, 0);\n            --safe-area-inset-left: env(safe-area-inset-left, 0);\n            --safe-area-inset-right: env(safe-area-inset-right, 0);\n        }\n\n        [data-theme=\"dark\"] {\n            --primary: #4ca89b;\n            --primary-dark: #3b867b;\n            --primary-light: #1a3c34;\n            --secondary: #9ca3af;\n            --accent: #f59e0b;\n            --background: #111827;\n            --card: #1f2a44;\n            --text: #f3f4f6;\n            --text-light: #d1d5db;\n            --border: #374151;\n            --success: #10b981;\n            --warning: #f59e0b;\n            --danger: #ef4444;\n            --shadow-sm: 0 2px 4px rgba(0, 0, 0, 0.3);\n            --shadow-md: 0 4px 12px rgba(0, 0, 0, 0.3);\n        }\n\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n            -webkit-font-smoothing: antialiased;\n            -moz-osx-font-smoothing: grayscale;\n        }\n\n        html {\n            height: 100%;\n            font-size: 16px;\n        }\n\n        body {\n            font-family: var(--font-sans);\n            background: linear-gradient(to bottom, var(--background), var(--background));\n            color: var(--text);\n            line-height: 1.5;\n            min-height: 100vh;\n            padding: 1.5rem;\n            padding-left: calc(1.5rem + var(--safe-area-inset-left));\n            padding-right: calc(1.5rem + var(--safe-area-inset-right));\n            padding-top: calc(1.5rem + var(--safe-area-inset-top));\n            padding-bottom: calc(1.5rem + var(--safe-area-inset-bottom));\n            font-size: 0.9375rem;\n            font-weight: 400;\n            display: flex;\n            flex-direction: column;\n            overscroll-behavior: none;\n            -webkit-tap-highlight-color: transparent;\n            transition: background-color 0.3s ease, color 0.3s ease;\n        }\n\n        .container {\n            max-width: 1280px;\n            margin: 0 auto;\n            width: 100%;\n            flex: 1;\n        }\n\n        .header {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n            align-items: center;\n            margin-bottom: 1.5rem;\n            padding: 1.5rem;\n            border-radius: var(--radius-lg);\n            box-shadow: var(--shadow-md);\n            border: none;\n            background: linear-gradient(145deg, var(--card), var(--background));\n        }\n\n        .logo {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n        }\n\n        .logo-icon {\n            width: 2.75rem;\n            height: 2.75rem;\n            background: var(--primary);\n            border-radius: var(--radius-md);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            color: white;\n            font-weight: 700;\n            font-size: 1.5rem;\n            box-shadow: 0 2px 8px rgba(44, 107, 95, 0.2);\n        }\n\n        .logo-text {\n            font-size: 2rem;\n            font-weight: 900;\n            color: var(--text);\n            letter-spacing: -0.02em;\n        }\n\n        .controls {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 0.5rem;\n            justify-content: center;\n            align-items: center;\n        }\n\n        .theme-toggle {\n            background: transparent;\n            border: 1px solid var(--border);\n            width: 3rem;\n            height: 3rem;\n            border-radius: var(--radius-md);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            cursor: pointer;\n            color: var(--text);\n            transition: var(--transition);\n        }\n\n        .theme-toggle:hover {\n            background: var(--primary-light);\n            transform: scale(1.05);\n        }\n\n        .btn {\n            padding: 0.875rem 1.25rem;\n            border-radius: var(--radius-md);\n            border: 1px solid var(--border);\n            background-color: var(--card);\n            font-weight: 500;\n            cursor: pointer;\n            display: flex;\n            align-items: center;\n            gap: 0.5rem;\n            transition: var(--transition);\n            box-shadow: var(--shadow-sm);\n            color: var(--text);\n            font-size: 0.9375rem;\n            line-height: 1.25;\n            min-height: 3rem;\n            min-width: 3rem;\n            letter-spacing: -0.01em;\n            touch-action: manipulation;\n        }\n\n        .btn:hover, .btn:focus-visible {\n            background-color: var(--primary-light);\n            border-color: var(--primary);\n            transform: translateY(-2px);\n            box-shadow: 0 4px 12px rgba(44, 107, 95, 0.15);\n            outline: none;\n        }\n\n        .btn-primary {\n            background: var(--primary);\n            color: white;\n            border: none;\n            box-shadow: 0 2px 8px rgba(44, 107, 95, 0.2);\n        }\n\n        .btn-primary:hover, .btn-primary:focus-visible {\n            background: var(--primary-dark);\n            transform: translateY(-2px);\n            box-shadow: 0 4px 12px rgba(44, 107, 95, 0.3);\n        }\n\n        .mode-indicator {\n            display: flex;\n            align-items: center;\n            gap: 0.5rem;\n            margin-bottom: 1rem;\n            color: var(--text-light);\n            padding: 0.75rem 1rem;\n            background-color: var(--primary-light);\n            border-radius: var(--radius-md);\n            font-weight: 500;\n            font-size: 0.875rem;\n            box-shadow: var(--shadow-sm);\n        }\n\n        .card {\n            background: var(--card);\n            border-radius: var(--radius-lg);\n            padding: 1.75rem;\n            box-shadow: var(--shadow-md);\n            margin-bottom: 1.5rem;\n            border: none;\n            transition: background-color 0.3s ease;\n        }\n\n        .card-header {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            gap: 0.5rem;\n            margin-bottom: 0.75rem;\n        }\n\n        .card-title {\n            font-size: 1.375rem;\n            font-weight: 800;\n            color: var(--text);\n            letter-spacing: -0.02em;\n        }\n\n        .summary-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: 1.25rem;\n            margin-bottom: 1.5rem;\n        }\n\n        .summary-item {\n            padding: 1.25rem;\n            background: linear-gradient(145deg, var(--card), var(--background));\n            border-radius: var(--radius-md);\n            box-shadow: var(--shadow-md);\n            text-align: center;\n            border: none;\n            transition: background-color 0.3s ease;\n        }\n\n        .summary-label {\n            font-size: 0.875rem;\n            color: var(--text-light);\n            margin-bottom: 0.5rem;\n            font-weight: 500;\n        }\n\n        .summary-value {\n            font-size: 1.75rem;\n            font-weight: 700;\n            color: var(--text);\n        }\n\n        .progress-bar {\n            height: 0.5rem;\n            background: var(--primary-light);\n            border-radius: var(--radius-md);\n            overflow: hidden;\n            margin-top: 0.5rem;\n        }\n\n        .progress-bar-fill {\n            height: 100%;\n            background: var(--primary);\n            border-radius: var(--radius-md);\n            transition: width 0.5s ease;\n        }\n\n        .category-totals {\n            margin-top: 1rem;\n        }\n\n        .category-total-item {\n            display: flex;\n            justify-content: space-between;\n            padding: 0.75rem 0;\n            border-bottom: 1px solid var(--border);\n            font-size: 0.875rem;\n        }\n\n        .category-total-item:last-child {\n            border-bottom: none;\n        }\n\n        .category-total-name {\n            font-weight: 600;\n        }\n\n        .category-total-amount {\n            color: var(--primary);\n            font-weight: 600;\n        }\n\n        .tabs {\n            display: flex;\n            gap: 0.25rem;\n            overflow-x: auto;\n            padding: 0.5rem;\n            background: transparent;\n            border: 1px solid var(--border);\n            border-radius: var(--radius-md);\n            margin-bottom: 1.5rem;\n            scroll-snap-type: x mandatory;\n            -webkit-overflow-scrolling: touch;\n        }\n\n        .tabs::-webkit-scrollbar {\n            display: none;\n        }\n\n        .tab {\n            white-space: nowrap;\n            padding: 0.75rem 1rem;\n            border-radius: var(--radius-sm);\n            font-weight: 500;\n            cursor: pointer;\n            color: var(--text-light);\n            transition: var(--transition);\n            scroll-snap-align: start;\n        }\n\n        .tab.active, .tab:hover {\n            background: var(--primary);\n            color: white;\n            box-shadow: 0 2px 8px rgba(44, 107, 95, 0.2);\n        }\n\n        .expense-table-container {\n            overflow-x: auto;\n            -webkit-overflow-scrolling: touch;\n        }\n\n        .expense-table {\n            width: 100%;\n            border-collapse: separate;\n            border-spacing: 0;\n            margin-top: 0.75rem;\n        }\n\n        .expense-table th {\n            text-align: left;\n            padding: 1rem;\n            font-weight: 500;\n            color: var(--text-light);\n            font-size: 0.875rem;\n            border-bottom: 2px solid var(--border);\n            background-color: var(--card);\n        }\n\n        .expense-table td {\n            padding: 1rem;\n            background-color: var(--card);\n            border-bottom: 1px solid var(--border);\n            font-size: 0.875rem;\n        }\n\n        .currency-badge {\n            display: inline-block;\n            padding: 0.25rem 0.5rem;\n            border-radius: var(--radius-sm);\n            background: var(--primary-light);\n            color: var(--primary);\n            font-size: 0.75rem;\n            font-weight: 500;\n            margin-right: 0.5rem;\n        }\n\n        .action-btn {\n            background: none;\n            border: none;\n            color: var(--text-light);\n            cursor: pointer;\n            padding: 0.25rem;\n            border-radius: var(--radius-sm);\n            transition: var(--transition);\n        }\n\n        .action-btn:hover, .action-btn:focus-visible {\n            color: var(--primary);\n            background: var(--primary-light);\n            outline: none;\n        }\n\n        .action-btn.delete-btn:hover, .action-btn.delete-btn:focus-visible {\n            color: var(--danger);\n        }\n\n        .category-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));\n            gap: 0.75rem;\n            margin-top: 1rem;\n        }\n\n        .category-item {\n            padding: 1rem;\n            border: 1px solid var(--border);\n            border-radius: var(--radius-md);\n            text-align: center;\n            cursor: pointer;\n            transition: var(--transition);\n            background-color: var(--card);\n            font-weight: 600;\n            font-size: 0.875rem;\n            box-shadow: var(--shadow-sm);\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            gap: 0.35rem;\n            touch-action: manipulation;\n        }\n\n        .category-item:hover, .category-item:focus-visible {\n            border-color: var(--primary);\n            background-color: var(--primary-light);\n            transform: translateY(-2px);\n            box-shadow: 0 4px 12px rgba(44, 107, 95, 0.15);\n            outline: none;\n        }\n\n        .category-item.active {\n            border-color: var(--primary);\n            background-color: var(--primary-light);\n            color: var(--primary);\n        }\n\n        .chart-container {\n            position: relative;\n            height: clamp(200px, 40vw, 280px);\n            margin-top: 1.5rem;\n            padding: 1rem;\n            background-color: var(--card);\n            border-radius: var(--radius-md);\n            box-shadow: var(--shadow-md);\n        }\n\n        .category-chart {\n            margin-top: 1.5rem;\n        }\n\n        .category-chart h3 {\n            font-size: 1.125rem;\n            font-weight: 700;\n            margin-bottom: 1rem;\n        }\n\n        .empty-state {\n            text-align: center;\n            padding: 2rem;\n            color: var(--text-light);\n        }\n\n        .empty-state i {\n            font-size: 2rem;\n            margin-bottom: 0.5rem;\n            color: var(--border);\n        }\n\n        .empty-state p {\n            font-size: 0.875rem;\n            font-weight: 500;\n        }\n\n        .expense-form {\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 0.75rem;\n        }\n\n        .form-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.25rem;\n        }\n\n        .form-group label {\n            font-size: 0.875rem;\n            color: var(--text);\n            font-weight: 600;\n        }\n\n        .form-control {\n            padding: 0.875rem;\n            border-radius: var(--radius-md);\n            border: 1px solid var(--border);\n            background-color: var(--background);\n            font-family: inherit;\n            font-size: 0.875rem;\n            color: var(--text);\n            transition: border-color 0.3s ease;\n            -webkit-appearance: none;\n            -moz-appearance: none;\n            appearance: none;\n        }\n\n        .form-control:focus {\n            outline: none;\n            border-color: var(--primary);\n            box-shadow: 0 0 0 3px rgba(44, 107, 95, 0.1);\n        }\n\n        .checkbox-group {\n            display: flex;\n            align-items: center;\n            gap: 0.5rem;\n            font-size: 0.875rem;\n        }\n\n        .checkbox-group input {\n            width: 1.25rem;\n            height: 1.25rem;\n            accent-color: var(--primary);\n        }\n\n        .modal {\n            position: fixed;\n            inset: 0;\n            background-color: rgba(0, 0, 0, 0.5);\n            display: none;\n            align-items: center;\n            justify-content: center;\n            z-index: 1000;\n            padding: 0.75rem;\n        }\n\n        .modal.modal-enter-active {\n            display: flex;\n        }\n\n        .modal-content {\n            background: var(--card);\n            padding: 2rem;\n            border-radius: var(--radius-lg);\n            width: 100%;\n            max-width: 36rem;\n            max-height: calc(100vh - 1.5rem);\n            overflow-y: auto;\n            box-shadow: var(--shadow-md);\n            border: none;\n            -webkit-overflow-scrolling: touch;\n        }\n\n        .modal-header {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            margin-bottom: 1rem;\n            padding-bottom: 1rem;\n            border-bottom: 1px solid var(--border);\n        }\n\n        .modal-title {\n            font-size: 1.25rem;\n            font-weight: 700;\n            color: var(--text);\n        }\n\n        .close-modal {\n            background: none;\n            border: none;\n            font-size: 1.25rem;\n            cursor: pointer;\n            color: var(--text-light);\n            padding: 0.25rem;\n            border-radius: var(--radius-sm);\n            transition: var(--transition);\n        }\n\n        .close-modal:hover, .close-modal:focus-visible {\n            color: var(--primary);\n            background-color: var(--primary-light);\n            outline: none;\n        }\n\n        .subcat-group {\n            margin-bottom: 1.5rem;\n        }\n\n        .subcat-group h4 {\n            color: var(--text);\n            margin-bottom: 0.75rem;\n            font-size: 1.125rem;\n            font-weight: 700;\n        }\n\n        .subcat-header {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            margin-bottom: 1rem;\n        }\n\n        .subcat-header h3 {\n            font-size: 1.25rem;\n            font-weight: 700;\n        }\n\n        .expense-section {\n            margin-top: 1.5rem;\n        }\n\n        .expense-header {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            margin-bottom: 1rem;\n        }\n\n        .expense-header h3 {\n            font-size: 1.25rem;\n            font-weight: 700;\n        }\n\n        .error-message {\n            color: var(--danger);\n            font-size: 0.875rem;\n            margin-top: 0.5rem;\n        }\n\n        .fade-in {\n            animation: fadeIn 0.5s ease-in;\n        }\n\n        @keyframes fadeIn {\n            from { opacity: 0; transform: translateY(10px); }\n            to { opacity: 1; transform: translateY(0); }\n        }\n\n        .modal-enter {\n            opacity: 0;\n            transform: scale(0.95);\n        }\n\n        .modal-enter-active {\n            opacity: 1;\n            transform: scale(1);\n            transition: opacity 200ms ease-in-out, transform 200ms ease-in-out;\n        }\n\n        .modal-exit {\n            opacity: 1;\n            transform: scale(1);\n        }\n\n        .modal-exit-active {\n            opacity: 0;\n            transform: scale(0.95);\n            transition: opacity 200ms ease-in-out, transform 200ms ease-in-out;\n        }\n\n        @media (min-width: 640px) {\n            .header {\n                flex-direction: row;\n                justify-content: space-between;\n                padding: 1.5rem;\n            }\n            .expense-form {\n                grid-template-columns: repeat(2, 1fr);\n                gap: 1rem;\n            }\n            .btn {\n                padding: 0.875rem 1.5rem;\n                font-size: 0.9375rem;\n            }\n            .btn span {\n                display: inline;\n            }\n            .card {\n                padding: 2rem;\n            }\n            .card-title {\n                font-size: 1.5rem;\n            }\n            .modal-content {\n                padding: 2rem;\n                max-width: 36rem;\n            }\n            .modal-title {\n                font-size: 1.5rem;\n            }\n            .chart-container {\n                height: 300px;\n            }\n        }\n\n        @media (min-width: 768px) {\n            .summary-grid {\n                grid-template-columns: repeat(3, 1fr);\n            }\n            .category-grid {\n                grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));\n            }\n        }\n\n        @media (max-width: 640px) {\n            .logo-text {\n                font-size: 1.75rem;\n            }\n            .logo-icon {\n                width: 2.25rem;\n                height: 2.25rem;\n                font-size: 1.25rem;\n            }\n            .btn {\n                padding: 0.75rem;\n                font-size: 0.875rem;\n                min-height: 2.5rem;\n            }\n            .btn span {\n                display: none;\n            }\n            .card {\n                padding: 1.25rem;\n                margin-bottom: 1rem;\n            }\n            .card-title {\n                font-size: 1.25rem;\n            }\n            .summary-item {\n                padding: 0.75rem;\n            }\n            .summary-label {\n                font-size: 0.8125rem;\n            }\n            .summary-value {\n                font-size: 1.5rem;\n            }\n            .tab {\n                padding: 0.625rem 0.875rem;\n                font-size: 0.875rem;\n            }\n            .form-control {\n                padding: 0.625rem;\n                font-size: 0.875rem;\n            }\n            .expense-table th,\n            .expense-table td {\n                font-size: 0.8125rem;\n            }\n            .modal-content {\n                padding: 1.5rem;\n                max-width: 95%;\n            }\n            .modal-title {\n                font-size: 1.125rem;\n            }\n            .close-modal {\n                font-size: 1.25rem;\n            }\n            .chart-container {\n                height: 220px;\n            }\n        }\n\n        @media (max-width: 480px) {\n            .expense-table {\n                display: block;\n            }\n            .expense-table thead {\n                display: none;\n            }\n            .expense-table tbody {\n                display: block;\n            }\n            .expense-table tr {\n                display: block;\n                margin-bottom: 1rem;\n                border: 1px solid var(--border);\n                border-radius: var(--radius-md);\n                background-color: var(--card);\n            }\n            .expense-table td {\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                padding: 0.5rem 0.75rem;\n                border: none;\n                border-bottom: 1px solid var(--border);\n                background-color: transparent;\n            }\n            .expense-table td:last-child {\n                border-bottom: none;\n            }\n            .expense-table td:before {\n                content: attr(data-label);\n                font-weight: 600;\n                color: var(--text-light);\n                flex: 1;\n                min-width: 100px;\n            }\n            .expense-table td[data-label=\"Actions\"] {\n                justify-content: flex-end;\n            }\n            .expense-table td[data-label=\"Actions\"]:before {\n                content: none;\n            }\n        }\n\n        @media (max-width: 360px) {\n            .category-grid {\n                grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));\n            }\n            .btn {\n                padding: 0.5rem 0.75rem;\n            }\n            .tab {\n                padding: 0.5rem;\n                font-size: 0.75rem;\n            }\n        }\n\n        @media (display-mode: standalone) {\n            body {\n                padding-top: calc(1.5rem + var(--safe-area-inset-top));\n            }\n        }\n\n        @media (max-height: 500px) and (orientation: landscape) {\n            .modal-content {\n                max-height: 80vh;\n            }\n            .chart-container {\n                height: 180px;\n            }\n        }\n\n        @media (prefers-reduced-motion: reduce) {\n            * {\n                transition: none !important;\n                animation: none !important;\n            }\n            .btn:hover, .btn:focus-visible,\n            .action-btn:hover, .action-btn:focus-visible,\n            .category-item:hover, .category-item:focus-visible {\n                transform: none;\n            }\n        }\n\n        @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n            .btn, .tab, .category-item, .action-btn {\n                border-width: 0.5px;\n            }\n        }\n\n\n</style>\n\n</head>\n<body>\n    <div id=\"root\"></div>\n    <script type=\"text/babel\">\n        const { useState, useEffect, useRef } = React;\n\n\n// Currency list\nconst currencies = [\n    { code: 'CAD', symbol: 'C$', name: 'Canadian Dollar' },\n    { code: 'USD', symbol: '$', name: 'US Dollar' },\n    { code: 'EUR', symbol: '€', name: 'Euro' },\n    { code: 'GBP', symbol: '£', name: 'British Pound' },\n    { code: 'JPY', symbol: '¥', name: 'Japanese Yen' },\n    { code: 'AUD', symbol: 'A$', name: 'Australian Dollar' },\n    { code: 'CHF', symbol: 'Fr', name: 'Swiss Franc' },\n    { code: 'CNY', symbol: '¥', name: 'Chinese Yuan' },\n    { code: 'INR', symbol: '₹', name: 'Indian Rupee' },\n    { code: 'MXN', symbol: '$', name: 'Mexican Peso' },\n    { code: 'NZD', symbol: '$', name: 'New Zealand Dollar' },\n    { code: 'SGD', symbol: '$', name: 'Singapore Dollar' },\n    { code: 'HKD', symbol: '$', name: 'Hong Kong Dollar' },\n    { code: 'SEK', symbol: 'kr', name: 'Swedish Krona' },\n    { code: 'KRW', symbol: '₩', name: 'South Korean Won' },\n    { code: 'NOK', symbol: 'kr', name: 'Norwegian Krone' },\n    { code: 'TRY', symbol: '₺', name: 'Turkish Lira' },\n    { code: 'RUB', symbol: '₽', name: 'Russian Ruble' },\n    { code: 'BRL', symbol: 'R$', name: 'Brazilian Real' },\n    { code: 'ZAR', symbol: 'R', name: 'South African Rand' }\n];\n\n// Category icons\nconst categoryIcons = {\n    'Transportation': 'fa-car',\n    'Accommodation': 'fa-home',\n    'Food & Dining': 'fa-utensils',\n    'Health': 'fa-heartbeat',\n    'Entertainment': 'fa-ticket-alt',\n    'Travel': 'fa-plane',\n    'Activities': 'fa-hiking'\n};\n\n// Helper functions\nconst getStartOfWeek = (date) => {\n    const day = date.getDay();\n    const diff = (day === 0 ? -6 : 1 - day);\n    const start = new Date(date);\n    start.setDate(start.getDate() + diff);\n    start.setHours(0, 0, 0, 0);\n    return start;\n};\n\nconst getEndOfWeek = (date) => {\n    const start = getStartOfWeek(date);\n    const end = new Date(start);\n    end.setDate(end.getDate() + 6);\n    end.setHours(23, 59, 59, 999);\n    return end;\n};\n\n// Error Boundary Component\nfunction ErrorBoundary({ children }) {\n    const [hasError, setHasError] = useState(false);\n\n    useEffect(() => {\n        const handleError = (error, errorInfo) => {\n            console.error('ErrorBoundary caught:', error, errorInfo);\n            setHasError(true);\n        };\n        window.addEventListener('error', handleError);\n        return () => window.removeEventListener('error', handleError);\n    }, []);\n\n    if (hasError) {\n        return (\n            <div className=\"card\">\n                <div className=\"empty-state\">\n                    <i className=\"fas fa-exclamation-circle\"></i>\n                    <p>Something went wrong. Please refresh the page.</p>\n                </div>\n            </div>\n        );\n    }\n    return children;\n}\n\n// Main App Component\nfunction App() {\n    const [state, setState] = useState({\n        mode: 'normal',\n        expenses: [],\n        categories: {\n            normal: [\n                { name: 'Transportation', subcategories: ['Car Insurance', 'Fuel', 'Parking', 'Public Transit', 'Other'] },\n                { name: 'Accommodation', subcategories: ['Rent', 'Mortgage', 'Utilities', 'Internet', 'Other'] },\n                { name: 'Food & Dining', subcategories: ['Groceries', 'Restaurants', 'Coffee', 'Takeout', 'Other'] },\n                { name: 'Health', subcategories: ['Doctor Visits', 'Medications', 'Dental', 'Vision', 'Fitness', 'Other'] },\n                { name: 'Entertainment', subcategories: ['Movies', 'Games', 'Sports', 'Concerts', 'Other'] },\n            ],\n            travel: [\n                { name: 'Travel', subcategories: ['Flights', 'Hotels', 'Dining', 'Tours', 'Visas', 'Other'] },\n                { name: 'Transportation', subcategories: ['Local Transport', 'Car Rental', 'Fuel', 'Parking', 'Other'] },\n                { name: 'Accommodation', subcategories: ['Hotels', 'Airbnb', 'Hostels', 'Other'] },\n                { name: 'Health', subcategories: ['Travel Insurance', 'Medications', 'Vaccinations', 'Other'] },\n                { name: 'Activities', subcategories: ['Tours', 'Museums', 'Entertainment', 'Shopping', 'Other'] },\n            ],\n        },\n        currentCategory: 'Transportation',\n        currentSubcategory: null,\n        showCharts: false,\n        baseCurrency: 'CAD',\n        exchangeRates: {},\n        charts: {},\n        paycheck: 0,\n        weeklyBudgetNormal: 0,\n        travelBudget: 0,\n        weeklyBudgetTravel: 0,\n        editingId: null,\n        fromRecurringList: false,\n        modal: null,\n        error: null,\n    });\n\n    const chartRef = useRef(null);\n    const categoryChartRefs = useRef({});\n\n    // Fetch exchange rates\n    const getExchangeRates = async () => {\n        if (Object.keys(state.exchangeRates).length > 0) return;\n        try {\n            const response = await fetch(`https://api.exchangerate-api.com/v4/latest/${state.baseCurrency}`);\n            if (!response.ok) throw new Error('Failed to fetch exchange rates');\n            const data = await response.json();\n            setState(prev => ({ ...prev, exchangeRates: { ...data.rates, [state.baseCurrency]: 1 } }));\n        } catch (error) {\n            console.error('Failed to fetch exchange rates:', error);\n            setState(prev => ({ ...prev, error: 'Failed to fetch exchange rates. Using default rate of 1.' }));\n        }\n    };\n\n    // Convert amount to base currency\n    const convertToBase = (amount, currency) => {\n        if (currency === state.baseCurrency) return amount;\n        const rate = state.exchangeRates[currency] || 1;\n        return amount / rate;\n    };\n\n    // Toggle mode\n    const toggleMode = () => {\n        setState(prev => ({\n            ...prev,\n            mode: prev.mode === 'normal' ? 'travel' : 'normal',\n            currentCategory: prev.categories[prev.mode === 'normal' ? 'travel' : 'normal'][0].name,\n            currentSubcategory: null,\n            showCharts: false,\n        }));\n    };\n\n    // Toggle charts\n    const toggleCharts = () => {\n        setState(prev => ({ ...prev, showCharts: !prev.showCharts }));\n    };\n\n    // Open modal\n    const openModal = (modalType, editingId = null, fromRecurringList = false) => {\n        setState(prev => ({ ...prev, modal: modalType, editingId, fromRecurringList }));\n    };\n\n    // Close modal\n    const closeModal = () => {\n        setState(prev => ({ ...prev, modal: null, editingId: null, fromRecurringList: false, error: null }));\n    };\n\n    // Save new category\n    const saveCategory = () => {\n        const nameInput = document.getElementById('new-category-name');\n        if (!nameInput) return;\n        const name = nameInput.value.trim();\n        if (!name) {\n            setState(prev => ({ ...prev, error: 'Please enter a category name' }));\n            return;\n        }\n        setState(prev => ({\n            ...prev,\n            categories: {\n                ...prev.categories,\n                [prev.mode]: [...prev.categories[prev.mode], { name, subcategories: ['Other'] }],\n            },\n            modal: null,\n            error: null,\n        }));\n    };\n\n    // Save new subcategory\n    const saveSubcategory = () => {\n        const nameInput = document.getElementById('new-subcategory-name');\n        if (!nameInput) return;\n        const name = nameInput.value.trim();\n        if (!name) {\n            setState(prev => ({ ...prev, error: 'Please enter a subcategory name' }));\n            return;\n        }\n        setState(prev => ({\n            ...prev,\n            categories: {\n                ...prev.categories,\n                [prev.mode]: prev.categories[prev.mode].map(cat =>\n                    cat.name === prev.currentCategory\n                        ? { ...cat, subcategories: [...cat.subcategories, name] }\n                        : cat\n                ),\n            },\n            modal: null,\n            error: null,\n        }));\n    };\n\n    // Save budgets\n    const saveBudgets = () => {\n        const paycheck = parseFloat(document.getElementById('paycheck')?.value) || 0;\n        const weeklyBudgetNormal = parseFloat(document.getElementById('weekly-budget-normal')?.value) || 0;\n        const travelBudget = parseFloat(document.getElementById('travel-budget')?.value) || 0;\n        const weeklyBudgetTravel = parseFloat(document.getElementById('weekly-budget-travel')?.value) || 0;\n        setState(prev => ({\n            ...prev,\n            paycheck: prev.mode === 'normal' ? paycheck : prev.paycheck,\n            weeklyBudgetNormal: prev.mode === 'normal' ? weeklyBudgetNormal : prev.weeklyBudgetNormal,\n            travelBudget: prev.mode === 'travel' ? travelBudget : prev.travelBudget,\n            weeklyBudgetTravel: prev.mode === 'travel' ? weeklyBudgetTravel : prev.weeklyBudgetTravel,\n            modal: null,\n            error: null,\n        }));\n    };\n\n    // Save expense\n    const saveExpense = () => {\n        const amountInput = document.getElementById('amount');\n        const dateInput = document.getElementById('date');\n        const recurringInput = document.getElementById('recurring');\n        const recurringStartInput = document.getElementById('recurring-start');\n        if (!amountInput || !dateInput) return;\n\n        const amount = parseFloat(amountInput.value);\n        if (!amount || isNaN(amount) || amount <= 0) {\n            setState(prev => ({ ...prev, error: 'Please enter a valid amount' }));\n            return;\n        }\n        if (recurringInput?.checked && !recurringStartInput?.value) {\n            setState(prev => ({ ...prev, error: 'Please enter a start date for recurring expenses' }));\n            return;\n        }\n\n        const expense = {\n            id: state.editingId || Date.now(),\n            mode: state.mode,\n            category: document.getElementById('modal-category')?.value,\n            subcategory: document.getElementById('modal-subcategory')?.value,\n            amount,\n            currency: document.getElementById('currency')?.value,\n            symbol: currencies.find(c => c.code === document.getElementById('currency')?.value)?.symbol,\n            date: dateInput.value,\n            description: document.getElementById('description')?.value || document.getElementById('modal-subcategory')?.value,\n            countWeekly: document.getElementById('count-weekly')?.checked,\n            recurring: recurringInput?.checked ? {\n                start: recurringStartInput.value,\n                end: document.getElementById('recurring-forever')?.checked ? null : document.getElementById('recurring-end')?.value || null,\n                forever: document.getElementById('recurring-forever')?.checked,\n            } : false,\n        };\n\n        setState(prev => ({\n            ...prev,\n            expenses: prev.editingId\n                ? prev.expenses.map(exp => (exp.id === prev.editingId ? expense : exp))\n                : [...prev.expenses, expense],\n            modal: null,\n            editingId: null,\n            fromRecurringList: false,\n            error: null,\n        }));\n    };\n\n    // Edit expense\n    const editExpense = (id) => {\n        openModal('add-expense', id, state.fromRecurringList);\n    };\n\n    // Delete expense\n    const deleteExpense = (id) => {\n        setState(prev => ({\n            ...prev,\n            expenses: prev.expenses.filter(exp => exp.id !== id),\n        }));\n    };\n\n    // Render charts\n    useEffect(() => {\n        if (!state.showCharts || state.expenses.length === 0) return;\n\n        const modeExpenses = state.expenses.filter(exp => exp.mode === state.mode);\n        const categoryTotals = {};\n        modeExpenses.forEach(exp => {\n            categoryTotals[exp.category] = (categoryTotals[exp.category] || 0) + convertToBase(exp.amount, exp.currency);\n        });\n\n        if (chartRef.current) {\n            if (state.charts.main) state.charts.main.destroy();\n            const ctx = chartRef.current.getContext('2d');\n            const newChart = new Chart(ctx, {\n                type: 'doughnut',\n                data: {\n                    labels: Object.keys(categoryTotals),\n                    datasets: [{\n                        data: Object.values(categoryTotals),\n                        backgroundColor: ['#1a1a1a', '#4b5563', '#6b7280', '#9ca3af', '#d1d5db'],\n                        borderWidth: 1,\n                        borderColor: '#fff',\n                        hoverOffset: 12,\n                    }],\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    plugins: {\n                        legend: {\n                            position: 'bottom',\n                            labels: { font: { size: 12, family: 'Inter', weight: '600' }, padding: 16 },\n                        },\n                        tooltip: { backgroundColor: '#1a1a1a', bodyFont: { family: 'Inter', size: 12 }, titleFont: { family: 'Inter', size: 14 } },\n                    },\n                    cutout: '65%',\n                    animation: { animateScale: true },\n                },\n            });\n            setState(prev => ({ ...prev, charts: { ...prev.charts, main: newChart } }));\n        }\n\n        const categorySubtotals = {};\n        modeExpenses.forEach(exp => {\n            if (!categorySubtotals[exp.category]) categorySubtotals[exp.category] = {};\n            categorySubtotals[exp.category][exp.subcategory] = (categorySubtotals[exp.category][exp.subcategory] || 0) + convertToBase(exp.amount, exp.currency);\n        });\n\n        Object.keys(categorySubtotals).forEach(cat => {\n            if (categoryChartRefs.current[cat] && Object.keys(categorySubtotals[cat]).length > 0) {\n                if (state.charts[cat]) state.charts[cat].destroy();\n                const ctx = categoryChartRefs.current[cat].getContext('2d');\n                const newChart = new Chart(ctx, {\n                    type: 'pie',\n                    data: {\n                        labels: Object.keys(categorySubtotals[cat]),\n                        datasets: [{\n                            data: Object.values(categorySubtotals[cat]),\n                            backgroundColor: ['#1a1a1a', '#4b5563', '#6b7280', '#9ca3af', '#d1d5db'],\n                            borderWidth: 1,\n                            borderColor: '#fff',\n                        }],\n                    },\n                    options: {\n                        responsive: true,\n                        maintainAspectRatio: false,\n                        plugins: {\n                            legend: {\n                                position: 'bottom',\n                                labels: { font: { size: 12, family: 'Inter', weight: '600' }, padding: 16 },\n                            },\n                            tooltip: { backgroundColor: '#1a1a1a', bodyFont: { family: 'Inter', size: 12 }, titleFont: { family: 'Inter', size: 14 } },\n                        },\n                    },\n                });\n                setState(prev => ({ ...prev, charts: { ...prev.charts, [cat]: newChart } }));\n            }\n        });\n\n        return () => {\n            Object.values(state.charts).forEach(chart => chart?.destroy());\n        };\n    }, [state.showCharts, state.expenses, state.mode, state.exchangeRates]);\n\n    // Initialize app\n    useEffect(() => {\n        getExchangeRates();\n        return () => {\n            Object.values(state.charts).forEach(chart => chart?.destroy());\n        };\n    }, []);\n\n    // Handle recurring checkbox\n    useEffect(() => {\n        const recurringCheckbox = document.getElementById('recurring');\n        const recurringOptions = document.getElementById('recurring-options');\n        const recurringForever = document.getElementById('recurring-forever');\n        const recurringEnd = document.getElementById('recurring-end');\n        if (recurringCheckbox && recurringOptions) {\n            const handleRecurringChange = () => {\n                recurringOptions.style.display = recurringCheckbox.checked ? 'block' : 'none';\n            };\n            recurringCheckbox.addEventListener('change', handleRecurringChange);\n            if (recurringForever && recurringEnd) {\n                const handleForeverChange = () => {\n                    recurringEnd.disabled = recurringForever.checked;\n                };\n                recurringForever.addEventListener('change', handleForeverChange);\n                return () => {\n                    recurringCheckbox.removeEventListener('change', handleRecurringChange);\n                    recurringForever.removeEventListener('change', handleForeverChange);\n                };\n            }\n        }\n    }, [state.modal]);\n\n    // Update summary\n    const getSummary = () => {\n        const modeExpenses = state.expenses.filter(exp => exp.mode === state.mode);\n        const total = modeExpenses.reduce((sum, exp) => sum + convertToBase(exp.amount, exp.currency), 0);\n        const startOfWeek = getStartOfWeek(new Date()).toISOString().split('T')[0];\n        const endOfWeek = getEndOfWeek(new Date()).toISOString().split('T')[0];\n        const weeklySpent = modeExpenses\n            .filter(exp => exp.date >= startOfWeek && exp.date <= endOfWeek)\n            .reduce((sum, exp) => sum + (exp.countWeekly ? convertToBase(exp.amount, exp.currency) : 0), 0);\n\n        return {\n            total,\n            weeklySpent,\n            budget: state.mode === 'normal' ? state.paycheck : state.travelBudget,\n            weeklyBudget: state.mode === 'normal' ? state.weeklyBudgetNormal : state.weeklyBudgetTravel,\n        };\n    };\n\n    // Modal component (kept from Script 1)\n    function Modal({ type, onClose }) {\n        if (!type) return null;\n        const editingExpense = state.editingId ? state.expenses.find(exp => exp.id === state.editingId) : null;\n\n        return (\n            <div className=\"modal modal-enter-active\" aria-modal=\"true\" role=\"dialog\">\n                <div className=\"modal-content\">\n                    {state.error && <div className=\"error-message\">{state.error}</div>}\n                    {type === 'add-category' && (\n                        <>\n                            <div className=\"modal-header\">\n                                <h3 className=\"modal-title\">New Category</h3>\n                                <button onClick={onClose} className=\"close-modal\" aria-label=\"Close modal\">&times;</button>\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"new-category-name\">Name</label>\n                                <input id=\"new-category-name\" type=\"text\" className=\"form-control\" placeholder=\"Enter category name\" />\n                            </div>\n                            <button onClick={saveCategory} className=\"btn btn-primary\" style={{ marginTop: '1rem', width: '100%' }}>Save</button>\n                        </>\n                    )}\n                    {type === 'add-subcategory' && (\n                        <>\n                            <div className=\"modal-header\">\n                                <h3 className=\"modal-title\">New Subcategory</h3>\n                                <button onClick={onClose} className=\"close-modal\" aria-label=\"Close modal\">&times;</button>\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"new-subcategory-name\">Name</label>\n                                <input id=\"new-subcategory-name\" type=\"text\" className=\"form-control\" placeholder=\"Enter subcategory name\" />\n                            </div>\n                            <button onClick={saveSubcategory} className=\"btn btn-primary\" style={{ marginTop: '1rem', width: '100%' }}>Save</button>\n                        </>\n                    )}\n                    {type === 'set-budgets' && (\n                        <>\n                            <div className=\"modal-header\">\n                                <h3 className=\"modal-title\">Set Budgets for {state.mode.charAt(0).toUpperCase() + state.mode.slice(1)}</h3>\n                                <button onClick={onClose} className=\"close-modal\" aria-label=\"Close modal\">&times;</button>\n                            </div>\n                            {state.mode === 'normal' ? (\n                                <>\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"paycheck\">Paycheck</label>\n                                        <input id=\"paycheck\" type=\"number\" step=\"0.01\" className=\"form-control\" defaultValue={state.paycheck} placeholder=\"0.00\" />\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"weekly-budget-normal\">Weekly Budget</label>\n                                        <input id=\"weekly-budget-normal\" type=\"number\" step=\"0.01\" className=\"form-control\" defaultValue={state.weeklyBudgetNormal} placeholder=\"0.00\" />\n                                    </div>\n                                </>\n                            ) : (\n                                <>\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"travel-budget\">Budget</label>\n                                        <input id=\"travel-budget\" type=\"number\" step=\"0.01\" className=\"form-control\" defaultValue={state.travelBudget} placeholder=\"0.00\" />\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"weekly-budget-travel\">Weekly Budget</label>\n                                        <input id=\"weekly-budget-travel\" type=\"number\" step=\"0.01\" className=\"form-control\" defaultValue={state.weeklyBudgetTravel} placeholder=\"0.00\" />\n                                    </div>\n                                </>\n                            )}\n                            <button onClick={saveBudgets} className=\"btn btn-primary\" style={{ marginTop: '1rem', width: '100%' }}>Save</button>\n                        </>\n                    )}\n                    {type === 'add-expense' && (\n                        <>\n                            <div className=\"modal-header\">\n                                <h3 className=\"modal-title\">{state.editingId ? 'Edit Expense' : 'Add Expense'}</h3>\n                                <button onClick={onClose} className=\"close-modal\" aria-label=\"Close modal\">&times;</button>\n                            </div>\n                            <div className=\"expense-form\">\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"modal-category\">Category</label>\n                                    <select id=\"modal-category\" className=\"form-control\" defaultValue={editingExpense?.category || state.currentCategory} onChange={() => {\n                                        const catSelect = document.getElementById('modal-category');\n                                        const subcatSelect = document.getElementById('modal-subcategory');\n                                        if (!catSelect || !subcatSelect) return;\n                                        const category = state.categories[state.mode].find(c => c.name === catSelect.value);\n                                        subcatSelect.innerHTML = '';\n                                        if (category) {\n                                            category.subcategories.forEach(sub => {\n                                                const opt = document.createElement('option');\n                                                opt.value = sub;\n                                                opt.textContent = sub;\n                                                subcatSelect.appendChild(opt);\n                                            });\n                                        }\n                                    }}>\n                                        {state.categories[state.mode].map(cat => (\n                                            <option key={cat.name} value={cat.name}>{cat.name}</option>\n                                        ))}\n                                    </select>\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"modal-subcategory\">Subcategory</label>\n                                    <select id=\"modal-subcategory\" className=\"form-control\" defaultValue={editingExpense?.subcategory || state.currentSubcategory}>\n                                        {state.categories[state.mode].find(c => c.name === (editingExpense?.category || state.currentCategory))?.subcategories.map(sub => (\n                                            <option key={sub} value={sub}>{sub}</option>\n                                        ))}\n                                    </select>\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"amount\">Amount</label>\n                                    <input id=\"amount\" type=\"number\" step=\"0.01\" className=\"form-control\" defaultValue={editingExpense?.amount || ''} placeholder=\"0.00\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"currency\">Currency</label>\n                                    <select id=\"currency\" className=\"form-control\" defaultValue={editingExpense?.currency || 'CAD'}>\n                                        {currencies.map(c => (\n                                            <option key={c.code} value={c.code}>{c.code} ({c.symbol}) - {c.name}</option>\n                                        ))}\n                                    </select>\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"date\">Date</label>\n                                    <input id=\"date\" type=\"date\" className=\"form-control\" defaultValue={editingExpense?.date || new Date().toISOString().split('T')[0]} />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"description\">Description</label>\n                                    <input id=\"description\" type=\"text\" className=\"form-control\" defaultValue={editingExpense?.description || ''} placeholder=\"Optional\" />\n                                </div>\n                                <div className=\"form-group checkbox-group\">\n                                    <input id=\"count-weekly\" type=\"checkbox\" defaultChecked={editingExpense ? editingExpense.countWeekly : true} />\n                                    <label htmlFor=\"count-weekly\">Count towards weekly spent</label>\n                                </div>\n                                <div className=\"form-group checkbox-group\">\n                                    <input id=\"recurring\" type=\"checkbox\" defaultChecked={editingExpense?.recurring} />\n                                    <label htmlFor=\"recurring\">Recurring Monthly</label>\n                                </div>\n                                <div id=\"recurring-options\" style={{ display: editingExpense?.recurring ? 'block' : 'none' }}>\n                                    <label>Recurring Period</label>\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"recurring-start\">Start Date</label>\n                                        <input id=\"recurring-start\" type=\"date\" className=\"form-control\" defaultValue={editingExpense?.recurring?.start || new Date().toISOString().split('T')[0]} />\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"recurring-end\">End Date (optional)</label>\n                                        <input id=\"recurring-end\" type=\"date\" className=\"form-control\" defaultValue={editingExpense?.recurring?.end || ''} disabled={editingExpense?.recurring?.forever} />\n                                    </div>\n                                    <div className=\"checkbox-group\">\n                                        <input id=\"recurring-forever\" type=\"checkbox\" defaultChecked={editingExpense?.recurring?.forever} />\n                                        <label htmlFor=\"recurring-forever\">Forever</label>\n                                    </div>\n                                </div>\n                            </div>\n                            <button onClick={saveExpense} className=\"btn btn-primary\" style={{ marginTop: '1rem', width: '100%' }}>Save</button>\n                        </>\n                    )}\n                    {type === 'recurring-list' && (\n                        <>\n                            <div className=\"modal-header\">\n                                <h3 className=\"modal-title\">Recurring Expenses</h3>\n                                <button onClick={onClose} className=\"close-modal\" aria-label=\"Close modal\">&times;</button>\n                            </div>\n                            {state.expenses.filter(exp => exp.recurring).length === 0 ? (\n                                <div className=\"empty-state\">\n                                    <i className=\"fas fa-sync-alt\"></i>\n                                    <p>No recurring expenses yet. Add one in the expense form!</p>\n                                </div>\n                            ) : (\n                                <div className=\"expense-table-container\">\n                                    <table className=\"expense-table\">\n                                        <thead>\n                                            <tr>\n                                                <th>Category</th>\n                                                <th>Subcategory</th>\n                                                <th>Amount</th>\n                                                <th>Period</th>\n                                                <th>Actions</th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            {state.expenses.filter(exp => exp.recurring).map(exp => (\n                                                <tr key={exp.id}>\n                                                    <td data-label=\"Category\">{exp.category}</td>\n                                                    <td data-label=\"Subcategory\">{exp.subcategory}</td>\n                                                    <td data-label=\"Amount\">\n                                                        <span className=\"currency-badge\">{exp.symbol}</span>\n                                                        {exp.amount.toFixed(2)}\n                                                    </td>\n                                                    <td data-label=\"Period\">From {exp.recurring.start} to {exp.recurring.end || 'forever'}</td>\n                                                    <td data-label=\"Actions\" style={{ textAlign: 'right' }}>\n                                                        <button onClick={() => editExpense(exp.id)} className=\"action-btn edit-btn\" aria-label=\"Edit expense\">\n                                                            <i className=\"fas fa-edit\"></i>\n                                                        </button>\n                                                        <button onClick={() => deleteExpense(exp.id)} className=\"action-btn delete-btn\" aria-label=\"Delete expense\">\n                                                            <i className=\"fas fa-trash\"></i>\n                                                        </button>\n                                                    </td>\n                                                </tr>\n                                            ))}\n                                        </tbody>\n                                    </table>\n                                </div>\n                            )}\n                        </>\n                    )}\n                </div>\n            </div>\n        );\n    }\n\n    // --------- Derived values for replacement sections ----------\n    const summary = getSummary();\n    const baseSymbol = currencies.find(c => c.code === state.baseCurrency)?.symbol || 'C$';\n    const currentSubs = state.categories[state.mode].find(c => c.name === state.currentCategory)?.subcategories || [];\n    const filtered = state.expenses.filter(e =>\n        e.mode === state.mode &&\n        e.category === state.currentCategory &&\n        (state.currentSubcategory ? e.subcategory === state.currentSubcategory : true)\n    );\n\n    // Main render\n    return (\n        <ErrorBoundary>\n            <div className=\"container\">\n                <div className=\"header fade-in\">\n\n                    <div className=\"controls\">\n                        <button onClick={toggleMode} className=\"btn\" title={state.mode === 'normal' ? 'Switch to Travel Mode' : 'Switch to Normal Mode'} aria-label=\"Toggle mode\">\n                            <i className={`fas ${state.mode === 'normal' ? 'fa-plane' : 'fa-home'}`}></i>\n                            <span>{state.mode === 'normal' ? 'Travel' : 'Normal'}</span>\n                        </button>\n                        <button onClick={toggleCharts} className=\"btn\" title={state.showCharts ? 'Hide Charts' : 'Show Charts'} aria-label=\"Toggle charts\">\n                            <i className=\"fas fa-chart-pie\"></i>\n                            <span>{state.showCharts ? 'Hide Charts' : 'Charts'}</span>\n                        </button>\n                        <button onClick={() => openModal('set-budgets')} className=\"btn\" title=\"Set Budgets\" aria-label=\"Set budgets\">\n                            <i className=\"fas fa-cog\"></i>\n                            <span>Budgets</span>\n                        </button>\n                        <button onClick={() => openModal('recurring-list')} className=\"btn\" title=\"View Recurring Expenses\" aria-label=\"View recurring expenses\">\n                            <i className=\"fas fa-sync-alt\"></i>\n                            <span>Recurring</span>\n                        </button>\n                    </div>\n                </div>\n\n                <div className=\"mode-indicator fade-in\">\n                    <i className={`fas ${state.mode === 'normal' ? 'fa-home' : 'fa-plane'}`}></i>\n                    <span>{state.mode.charAt(0).toUpperCase() + state.mode.slice(1)} Mode</span>\n                </div>\n\n                {state.showCharts && (\n                    <div className=\"card fade-in\">\n                        <div className=\"card-header\">\n                            <div className=\"card-title\">Analytics</div>\n                        </div>\n                        {state.expenses.filter(exp => exp.mode === state.mode).length === 0 ? (\n                            <div className=\"empty-state\">\n                                <i className=\"fas fa-chart-pie\"></i>\n                                <p>No expenses yet. Add some to see insights!</p>\n                            </div>\n                        ) : (\n                            <div>\n                                <div className=\"chart-container\">\n                                    <h3>Category Distribution</h3>\n                                    <canvas ref={chartRef}></canvas>\n                                </div>\n                                {state.categories[state.mode].map(cat => {\n                                    const subTotals = {};\n                                    state.expenses\n                                        .filter(exp => exp.mode === state.mode && exp.category === cat.name)\n                                        .forEach(exp => {\n                                            subTotals[exp.subcategory] = (subTotals[exp.subcategory] || 0) + convertToBase(exp.amount, exp.currency);\n                                        });\n                                    return Object.keys(subTotals).length > 0 ? (\n                                        <div key={cat.name} className=\"category-chart\">\n                                            <h3>{cat.name} Breakdown</h3>\n                                            <div className=\"chart-container\">\n                                                <canvas ref={el => (categoryChartRefs.current[cat.name] = el)}></canvas>\n                                            </div>\n                                        </div>\n                                    ) : null;\n                                })}\n                            </div>\n                        )}\n                    </div>\n                )}\n\n                <div className=\"card fade-in\">\n                    <div className=\"card-header\">\n                        <div className=\"card-title\">Summary - {state.mode.charAt(0).toUpperCase() + state.mode.slice(1)} Mode</div>\n                    </div>\n                    <div className=\"summary-grid\">\n                        <div className=\"summary-item\">\n                            <div className=\"summary-label\">{state.mode === 'normal' ? 'Paycheck' : 'Budget'}</div>\n                            <div className=\"summary-value\">{baseSymbol}{summary.budget.toFixed(2)}</div>\n                            <div className=\"progress-bar\">\n                                <div className=\"progress-bar-fill\" style={{ width: `${Math.min((summary.total / (summary.budget || 1)) * 100, 100)}%` }}></div>\n                            </div>\n                            <div className=\"text-xs text-gray-500 mt-1\">{((summary.total / (summary.budget || 1)) * 100).toFixed(1)}% Used</div>\n                        </div>\n                        <div className=\"summary-item\">\n                            <div className=\"summary-label\">{state.mode === 'normal' ? 'Total Expenses' : 'Budget Spent'}</div>\n                            <div className=\"summary-value\">{baseSymbol}{summary.total.toFixed(2)}</div>\n                        </div>\n                        <div className=\"summary-item\">\n                            <div className=\"summary-label\">Weekly Spent / Budget</div>\n                            <div className=\"summary-value\">{baseSymbol}{summary.weeklySpent.toFixed(2)} / {baseSymbol}{summary.weeklyBudget.toFixed(2)}</div>\n                            <div className=\"progress-bar\">\n                                <div className=\"progress-bar-fill\" style={{ width: `${Math.min((summary.weeklySpent / (summary.weeklyBudget || 1)) * 100, 100)}%` }}></div>\n                            </div>\n                            <div className=\"text-xs text-gray-500 mt-1\">{((summary.weeklySpent / (summary.weeklyBudget || 1)) * 100).toFixed(1)}% Used</div>\n                        </div>\n                    </div>\n                    <div className=\"category-totals\">\n                        <h4 style={{ marginBottom: '0.75rem' }}>Category Totals:</h4>\n                        {state.expenses.filter(exp => exp.mode === state.mode).length === 0 ? (\n                            <p>No expenses yet.</p>\n                        ) : (\n                            Object.entries(\n                                state.expenses\n                                    .filter(exp => exp.mode === state.mode)\n                                    .reduce((acc, exp) => {\n                                        acc[exp.category] = (acc[exp.category] || 0) + convertToBase(exp.amount, exp.currency);\n                                        return acc;\n                                    }, {})\n                            ).map(([cat, total]) => (\n                                <div key={cat} className=\"category-total-item\">\n                                    <span className=\"category-total-name\">{cat}</span>\n                                    <span className=\"category-total-amount\">{baseSymbol}{total.toFixed(2)}</span>\n                                </div>\n                            ))\n                        )}\n                    </div>\n                </div>\n\n                {/* CATEGORIES CARD */}\n                <div className=\"card fade-in\">\n                    <div className=\"card-header\">\n                        <div className=\"card-title\">Categories</div>\n                    </div>\n\n                    <div className=\"category-grid\">\n                        {state.categories[state.mode].map(cat => (\n                            <button\n                                key={cat.name}\n                                className={`category-item ${state.currentCategory === cat.name ? 'active' : ''}`}\n                                onClick={() => setState(prev => ({ ...prev, currentCategory: cat.name, currentSubcategory: null }))}\n                            >\n                                <i className={`fas ${categoryIcons[cat.name] || 'fa-folder'}`}></i>\n                                <span>{cat.name}</span>\n                            </button>\n                        ))}\n                    </div>\n\n                    <button\n                        className=\"btn btn-primary\"\n                        style={{ marginTop: '.75rem', width: '100%' }}\n                        onClick={() => openModal('add-category')}\n                    >\n                        <i className=\"fas fa-plus\"></i>\n                        <span>Add Category</span>\n                    </button>\n                </div>\n\n                {/* ======= Unified Subcategories + Expenses (improved design) ======= */}\n                <div className=\"card fade-in\">\n                    <div className=\"card-header\">\n                        <div className=\"card-title\">Subcategories &amp; Expenses</div>\n                        <div style={{ display:'flex', gap:'.5rem' }}>\n                            <button className=\"btn btn-primary\" onClick={() => openModal('add-subcategory')} aria-label=\"Add subcategory\">\n                                <i className=\"fas fa-plus\"></i><span>Add Subcategory</span>\n                            </button>\n                            <button\n                                className=\"btn btn-primary\"\n                                onClick={() =>\n                                    state.currentSubcategory\n                                        ? openModal('add-expense')\n                                        : setState(prev => ({ ...prev, error: 'Please select a subcategory first' }))\n                                }\n                                aria-label=\"Add expense\"\n                            >\n                                <i className=\"fas fa-plus\"></i><span>Add Expense</span>\n                            </button>\n                        </div>\n                    </div>\n\n                    {/* Segmented tabs: All + each subcategory */}\n                    <div className=\"tabs\">\n                        <div\n                            className={`tab ${state.currentSubcategory === null ? 'active' : ''}`}\n                            onClick={() => setState(prev => ({ ...prev, currentSubcategory: null }))}\n                        >\n                            All\n                        </div>\n                        {currentSubs.map(sub => (\n                            <div\n                                key={sub}\n                                className={`tab ${state.currentSubcategory === sub ? 'active' : ''}`}\n                                onClick={() => setState(prev => ({ ...prev, currentSubcategory: sub }))}\n                            >\n                                {sub}\n                            </div>\n                        ))}\n                    </div>\n\n                    {state.error && <div className=\"error-message\">{state.error}</div>}\n\n                    {/* If a specific subcategory is selected, show a focused table */}\n                    {state.currentSubcategory ? (\n                        <>\n                            {filtered.length === 0 ? (\n                                <div className=\"empty-state\">\n                                    <i className=\"fas fa-list\"></i>\n                                    <p>No expenses in this subcategory yet.</p>\n                                </div>\n                            ) : (\n                                <div className=\"expense-table-container\">\n                                    <table className=\"expense-table\">\n                                        <thead>\n                                            <tr>\n                                                <th>Amount</th>\n                                                <th>Date</th>\n                                                <th>Description</th>\n                                                <th>Weekly</th>\n                                                <th>Recurring</th>\n                                                <th>Actions</th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            {filtered.map(exp => (\n                                                <tr key={exp.id}>\n                                                    <td data-label=\"Amount\">\n                                                        <span className=\"currency-badge\">{exp.symbol}</span>\n                                                        {Number(exp.amount).toFixed(2)}\n                                                    </td>\n                                                    <td data-label=\"Date\">{exp.date}</td>\n                                                    <td data-label=\"Description\">{exp.description}</td>\n                                                    <td data-label=\"Weekly\">{exp.countWeekly ? <i className=\"fas fa-check\" title=\"Counts towards weekly\"></i> : ''}</td>\n                                                    <td data-label=\"Recurring\">{exp.recurring ? <i className=\"fas fa-sync-alt\" title={`Recurring from ${exp.recurring.start} to ${exp.recurring.end || 'forever'}`}></i> : ''}</td>\n                                                    <td data-label=\"Actions\" style={{ textAlign: 'right' }}>\n                                                        <button onClick={() => editExpense(exp.id)} className=\"action-btn edit-btn\" aria-label=\"Edit expense\">\n                                                            <i className=\"fas fa-edit\"></i>\n                                                        </button>\n                                                        <button onClick={() => deleteExpense(exp.id)} className=\"action-btn delete-btn\" aria-label=\"Delete expense\">\n                                                            <i className=\"fas fa-trash\"></i>\n                                                        </button>\n                                                    </td>\n                                                </tr>\n                                            ))}\n                                        </tbody>\n                                    </table>\n                                </div>\n                            )}\n                        </>\n                    ) : (\n                        /* All view: grouped by subcategory with per-group totals */\n                        <>\n                            {state.expenses.filter(exp => exp.mode === state.mode && exp.category === state.currentCategory).length === 0 ? (\n                                <div className=\"empty-state\">\n                                    <i className=\"fas fa-list\"></i>\n                                    <p>No expenses in this category yet.</p>\n                                </div>\n                            ) : (\n                                <div>\n                                    {Object.entries(\n                                        state.expenses\n                                            .filter(exp => exp.mode === state.mode && exp.category === state.currentCategory)\n                                            .reduce((acc, exp) => {\n                                                if (!acc[exp.subcategory]) acc[exp.subcategory] = [];\n                                                acc[exp.subcategory].push(exp);\n                                                return acc;\n                                            }, {})\n                                    ).map(([subcat, exps]) => {\n                                        const subTotal = exps.reduce((sum, exp) => sum + convertToBase(exp.amount, exp.currency), 0);\n                                        return (\n                                            <div key={subcat} className=\"subcat-group\">\n                                                <h4 style={{ display:'flex', justifyContent:'space-between', alignItems:'center' }}>\n                                                    <span>{subcat}</span>\n                                                    <span> Total: {baseSymbol}{subTotal.toFixed(2)}</span>\n                                                </h4>\n                                                <div className=\"expense-table-container\">\n                                                    <table className=\"expense-table\">\n                                                        <thead>\n                                                            <tr>\n                                                                <th>Amount</th>\n                                                                <th>Date</th>\n                                                                <th>Description</th>\n                                                                <th>Weekly</th>\n                                                                <th>Recurring</th>\n                                                                <th>Actions</th>\n                                                            </tr>\n                                                        </thead>\n                                                        <tbody>\n                                                            {exps.map(exp => (\n                                                                <tr key={exp.id}>\n                                                                    <td data-label=\"Amount\">\n                                                                        <span className=\"currency-badge\">{exp.symbol}</span>\n                                                                        {Number(exp.amount).toFixed(2)}\n                                                                    </td>\n                                                                    <td data-label=\"Date\">{exp.date}</td>\n                                                                    <td data-label=\"Description\">{exp.description}</td>\n                                                                    <td data-label=\"Weekly\">{exp.countWeekly ? <i className=\"fas fa-check\" title=\"Counts towards weekly\"></i> : ''}</td>\n                                                                    <td data-label=\"Recurring\">{exp.recurring ? <i className=\"fas fa-sync-alt\" title={`Recurring from ${exp.recurring.start} to ${exp.recurring.end || 'forever'}`}></i> : ''}</td>\n                                                                    <td data-label=\"Actions\" style={{ textAlign: 'right' }}>\n                                                                        <button onClick={() => editExpense(exp.id)} className=\"action-btn edit-btn\" aria-label=\"Edit expense\">\n                                                                            <i className=\"fas fa-edit\"></i>\n                                                                        </button>\n                                                                        <button onClick={() => deleteExpense(exp.id)} className=\"action-btn delete-btn\" aria-label=\"Delete expense\">\n                                                                            <i className=\"fas fa-trash\"></i>\n                                                                        </button>\n                                                                    </td>\n                                                                </tr>\n                                                            ))}\n                                                        </tbody>\n                                                    </table>\n                                                </div>\n                                            </div>\n                                        );\n                                    })}\n                                </div>\n                            )}\n                        </>\n                    )}\n                </div>\n                {/* ======= End unified section ======= */}\n\n                <Modal type={state.modal} onClose={closeModal} />\n            </div>\n        </ErrorBoundary>\n    );\n}\n\n// Render the app\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n</script>\n\n</body>\n\n\n<?php require 'app/views/templates/footer.php'; ?>\n","size_bytes":78754},"app/views/finance/index.php":{"content":"\n<?php require 'app/views/templates/header.php'; ?>\n\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Finance Hub - Modern Financial Manager</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\">\n    <style>\n        :root {\n    --primary: #2c6b5f;\n    --primary-dark: #1f4b43;\n    --primary-light: #e6f0ee;\n    --secondary: #5c6b7a;\n    --accent: #d97706;\n    --background: #f9fafb;\n    --card: #ffffff;\n    --text: #111827;\n    --text-light: #6b7280;\n    --border: #d1d5db;\n    --success: #059669;\n    --warning: #d97706;\n    --danger: #dc2626;\n    --shadow-sm: 0 2px 4px rgba(0, 0, 0, 0.05);\n    --shadow-md: 0 4px 12px rgba(0, 0, 0, 0.08);\n    --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    --radius-sm: 0.5rem;\n    --radius-md: 0.75rem;\n    --radius-lg: 1rem;\n    --font-sans: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, sans-serif;\n}\n\n[data-theme=\"dark\"] {\n    --primary: #4ca89b;\n    --primary-dark: #3b867b;\n    --primary-light: #1a3c34;\n    --secondary: #9ca3af;\n    --accent: #f59e0b;\n    --background: #111827;\n    --card: #1f2a44;\n    --text: #f3f4f6;\n    --text-light: #d1d5db;\n    --border: #374151;\n    --success: #10b981;\n    --warning: #f59e0b;\n    --danger: #ef4444;\n    --shadow-sm: 0 2px 4px rgba(0, 0, 0, 0.3);\n    --shadow-md: 0 4px 12px rgba(0, 0, 0, 0.3);\n}\n\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}\n\nbody {\n    font-family: var(--font-sans);\n    background: linear-gradient(to bottom, var(--background), var(--background));\n    color: var(--text);\n    line-height: 1.5;\n    min-height: 100vh;\n    padding: 1.5rem;\n    font-size: 0.9375rem;\n    font-weight: 400;\n    display: flex;\n    flex-direction: column;\n    overscroll-behavior: none;\n    -webkit-tap-highlight-color: transparent;\n    transition: background-color 0.3s ease, color 0.3s ease;\n    letter-spacing: -0.01em;\n}\n\n.container {\n    max-width: 1440px;\n    margin: 0 auto;\n    width: 100%;\n    flex: 1;\n    padding: 0 1rem;\n}\n\n.header {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    align-items: center;\n    margin-bottom: 1.5rem;\n    padding: 1.5rem;\n    border-radius: var(--radius-lg);\n    box-shadow: var(--shadow-md);\n    border: none;\n    background: linear-gradient(145deg, var(--card), var(--background));\n}\n\n@media (min-width: 768px) {\n    .header {\n        flex-direction: row;\n        justify-content: space-between;\n    }\n}\n\n.logo {\n    display: flex;\n    align-items: center;\n    gap: 0.75rem;\n}\n\n.logo-icon {\n    width: 2.75rem;\n    height: 2.75rem;\n    background: var(--primary);\n    border-radius: var(--radius-md);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: white;\n    font-weight: 700;\n    font-size: 1.5rem;\n    box-shadow: 0 2px 8px rgba(44, 107, 95, 0.2);\n}\n\n.logo-text {\n    font-size: 2rem;\n    font-weight: 900;\n    color: var(--text);\n    letter-spacing: -0.02em;\n}\n\n.controls {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 0.5rem;\n    justify-content: center;\n    align-items: center;\n}\n\n.theme-toggle {\n    background: transparent;\n    border: 1px solid var(--border);\n    width: 3rem;\n    height: 3rem;\n    border-radius: var(--radius-md);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    color: var(--text);\n    transition: var(--transition);\n}\n\n.theme-toggle:hover {\n    background: var(--primary-light);\n    transform: scale(1.05);\n}\n\n.currency-selector-wrapper {\n    position: relative;\n    display: inline-block;\n}\n\n.currency-selector {\n    padding: 0.875rem 2.75rem 0.875rem 1rem;\n    border-radius: var(--radius-md);\n    border: 1px solid var(--border);\n    background-color: var(--card);\n    font-weight: 500;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    transition: var(--transition);\n    box-shadow: var(--shadow-sm);\n    color: var(--text);\n    font-size: 0.875rem;\n    line-height: 1.25;\n    min-height: 3rem;\n    min-width: 3rem;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    appearance: none;\n    background-image: url('data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20256%20512%22%3E%3Cpath%20fill%3D%22%235c6b7a%22%20d%3D%22M119.5%20326.9L40.9%20248.3c-9.4-9.4-9.4-24.6%200-33.9l17.7-17.7c9.4-9.4%2024.6-9.4%2033.9%200L128%20285.3l35.5-35.5c9.4-9.4%2024.6-9.4%2033.9%200l17.7%2017.7c9.4%209.4%209.4%2024.6%200%2033.9l-78.6%2078.6c-9.4%209.4-24.6%209.4-33.9%200z%22%2F%3E%3C%2Fsvg%3E');\n    background-repeat: no-repeat;\n    background-position: right 0.75rem center;\n    background-size: 0.8rem;\n}\n\n.currency-selector:hover, .currency-selector:focus-visible {\n    background-color: var(--primary-light);\n    border-color: var(--primary);\n    transform: translateY(-2px);\n    box-shadow: 0 4px 12px rgba(44, 107, 95, 0.15);\n    outline: none;\n}\n\n.btn {\n    padding: 0.875rem 1.25rem;\n    border-radius: var(--radius-md);\n    border: 1px solid var(--border);\n    background-color: var(--card);\n    font-weight: 500;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    transition: var(--transition);\n    box-shadow: var(--shadow-sm);\n    color: var(--text);\n    font-size: 0.9375rem;\n    line-height: 1.25;\n    min-height: 3rem;\n    min-width: 3rem;\n    letter-spacing: -0.01em;\n}\n\n.btn:hover, .btn:focus-visible {\n    background-color: var(--primary-light);\n    border-color: var(--primary);\n    transform: translateY(-2px);\n    box-shadow: 0 4px 12px rgba(44, 107, 95, 0.15);\n    outline: none;\n}\n\n.btn-primary {\n    background: var(--primary);\n    color: white;\n    border: none;\n    box-shadow: 0 2px 8px rgba(44, 107, 95, 0.2);\n}\n\n.btn-primary:hover, .btn-primary:focus-visible {\n    background: var(--primary-dark);\n    transform: translateY(-2px);\n    box-shadow: 0 4px 12px rgba(44, 107, 95, 0.3);\n}\n\n.card {\n    background: var(--card);\n    border-radius: var(--radius-lg);\n    padding: 1.75rem;\n    box-shadow: var(--shadow-md);\n    margin-bottom: 1.5rem;\n    border: none;\n    transition: background-color 0.3s ease;\n}\n\n.card-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 0.5rem;\n    margin-bottom: 0.75rem;\n}\n\n.card-title {\n    font-size: 1.375rem;\n    font-weight: 800;\n    color: var(--text);\n    letter-spacing: -0.02em;\n}\n\n.summary-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 1.25rem;\n    margin-bottom: 1.5rem;\n}\n\n.summary-item {\n    padding: 1.25rem;\n    background: linear-gradient(145deg, var(--card), var(--background));\n    border-radius: var(--radius-md);\n    box-shadow: var(--shadow-md);\n    text-align: center;\n    border: none;\n    transition: background-color 0.3s ease;\n}\n\n.summary-label {\n    font-size: 0.875rem;\n    color: var(--text-light);\n    margin-bottom: 0.5rem;\n    font-weight: 500;\n}\n\n.summary-value {\n    font-size: 1.75rem;\n    font-weight: 700;\n    color: var(--text);\n}\n\n.tabs {\n    display: flex;\n    gap: 0.25rem;\n    overflow-x: auto;\n    padding: 0.5rem;\n    background: transparent;\n    border: 1px solid var(--border);\n    border-radius: var(--radius-md);\n    margin-bottom: 1.5rem;\n}\n\n.tabs::-webkit-scrollbar {\n    display: none;\n}\n\n.tab {\n    white-space: nowrap;\n    padding: 0.75rem 1rem;\n    border-radius: var(--radius-sm);\n    font-weight: 500;\n    cursor: pointer;\n    color: var(--text-light);\n    transition: var(--transition);\n}\n\n.tab.active, .tab:hover {\n    background: var(--primary);\n    color: white;\n    box-shadow: 0 2px 8px rgba(44, 107, 95, 0.2);\n}\n\n.section {\n    display: none;\n}\n\n.section.active {\n    display: block;\n}\n\n.expense-table-container {\n    overflow-x: auto;\n    -webkit-overflow-scrolling: touch;\n}\n\n.expense-table {\n    width: 100%;\n    border-collapse: separate;\n    border-spacing: 0;\n    margin-top: 0.75rem;\n}\n\n.expense-table th {\n    text-align: left;\n    padding: 1rem;\n    font-weight: 500;\n    color: var(--text-light);\n    font-size: 0.875rem;\n    border-bottom: 2px solid var(--border);\n    background-color: var(--card);\n}\n\n.expense-table td {\n    padding: 1rem;\n    background-color: var(--card);\n    border-bottom: 1px solid var(--border);\n    font-size: 0.875rem;\n}\n\n.action-btn {\n    background: none;\n    border: none;\n    color: var(--text-light);\n    cursor: pointer;\n    padding: 0.25rem;\n    border-radius: var(--radius-sm);\n    transition: var(--transition);\n}\n\n.action-btn:hover, .action-btn:focus-visible {\n    color: var(--primary);\n    background: var(--primary-light);\n    outline: none;\n}\n\n.empty-state {\n    text-align: center;\n    padding: 2rem;\n    color: var(--text-light);\n}\n\n.empty-state i {\n    font-size: 2rem;\n    margin-bottom: 0.5rem;\n    color: var(--border);\n}\n\n.empty-state p {\n    font-size: 0.875rem;\n    font-weight: 500;\n}\n\n.expense-form {\n    display: grid;\n    grid-template-columns: 1fr;\n    gap: 0.75rem;\n}\n\n.form-group {\n    display: flex;\n    flex-direction: column;\n    gap: 0.25rem;\n}\n\n.form-group label {\n    font-size: 0.875rem;\n    color: var(--text);\n    font-weight: 600;\n}\n\n.form-control {\n    padding: 0.875rem;\n    border-radius: var(--radius-md);\n    border: 1px solid var(--border);\n    background-color: var(--background);\n    font-family: inherit;\n    font-size: 0.875rem;\n    color: var(--text);\n    transition: border-color 0.3s ease;\n}\n\n.form-control:focus {\n    outline: none;\n    border-color: var(--primary);\n    box-shadow: 0 0 0 3px rgba(44, 107, 95, 0.1);\n}\n\n.modal {\n    position: fixed;\n    inset: 0;\n    background-color: rgba(0, 0, 0, 0.5);\n    display: none;\n    align-items: center;\n    justify-content: center;\n    z-index: 1000;\n    padding: 0.75rem;\n}\n\n.modal.active {\n    display: flex;\n}\n\n.modal-content {\n    background: var(--card);\n    padding: 2rem;\n    border-radius: var(--radius-lg);\n    width: 100%;\n    max-width: 36rem;\n    max-height: calc(100vh - 1.5rem);\n    overflow-y: auto;\n    box-shadow: var(--shadow-md);\n    border: none;\n}\n\n.modal-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 1rem;\n    padding-bottom: 1rem;\n    border-bottom: 1px solid var(--border);\n}\n\n.modal-title {\n    font-size: 1.25rem;\n    font-weight: 700;\n    color: var(--text);\n}\n\n.close-modal {\n    background: none;\n    border: none;\n    font-size: 1.25rem;\n    cursor: pointer;\n    color: var(--text-light);\n    padding: 0.25rem;\n    border-radius: var(--radius-sm);\n    transition: var(--transition);\n}\n\n.close-modal:hover, .close-modal:focus-visible {\n    color: var(--primary);\n    background-color: var(--primary-light);\n    outline: none;\n}\n\n.error-message {\n    color: var(--danger);\n    font-size: 0.875rem;\n    margin-top: 0.5rem;\n}\n\n.fade-in {\n    animation: fadeIn 0.5s ease-in;\n}\n\n.stats-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 1rem;\n    margin-bottom: 1.5rem;\n}\n\n.stat-card {\n    background: var(--card);\n    border-radius: var(--radius-md);\n    padding: 1rem;\n    box-shadow: var(--shadow-md);\n    border: none;\n    transition: background-color 0.3s ease;\n}\n\n.stat-label {\n    font-size: 0.875rem;\n    color: var(--text-light);\n    margin-bottom: 0.5rem;\n    font-weight: 500;\n}\n\n.stat-value {\n    font-size: 1.5rem;\n    font-weight: 700;\n    color: var(--text);\n}\n\n.debt-card {\n    background: var(--card);\n    border-radius: var(--radius-lg);\n    padding: 1.75rem;\n    box-shadow: var(--shadow-md);\n    margin-bottom: 1.5rem;\n    border: none;\n    position: relative;\n    transition: background-color 0.3s ease;\n}\n\n.debt-card-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start;\n    margin-bottom: 1rem;\n}\n\n.debt-lender {\n    font-size: 1.5rem;\n    font-weight: 800;\n    color: var(--text);\n}\n\n.debt-type-badge {\n    padding: 0.25rem 0.5rem;\n    border-radius: var(--radius-sm);\n    font-size: 0.75rem;\n    font-weight: 500;\n    background: var(--primary-light);\n    color: var(--primary);\n}\n\n.debt-apr {\n    font-size: 1.1rem;\n    font-weight: 700;\n}\n\n.apr-high {\n    color: var(--danger);\n}\n\n.apr-medium {\n    color: var(--warning);\n}\n\n.apr-low {\n    color: var(--success);\n}\n\n.debt-details {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 1rem;\n    margin-bottom: 1rem;\n}\n\n.debt-detail-item {\n    display: flex;\n    flex-direction: column;\n}\n\n.debt-detail-label {\n    font-size: 0.875rem;\n    color: var(--text-light);\n    margin-bottom: 0.25rem;\n}\n\n.debt-detail-value {\n    font-size: 1rem;\n    font-weight: 600;\n}\n\n.progress-container {\n    margin: 1rem 0;\n}\n\n.progress-bar {\n    height: 0.5rem;\n    background: var(--primary-light);\n    border-radius: var(--radius-md);\n    overflow: hidden;\n    margin-bottom: 0.5rem;\n}\n\n.progress-fill {\n    height: 100%;\n    background: var(--primary);\n    border-radius: var(--radius-md);\n    transition: width 0.5s ease;\n}\n\n.progress-info {\n    display: flex;\n    justify-content: space-between;\n    font-size: 0.875rem;\n    color: var(--text-light);\n}\n\n.utilization-warning {\n    color: var(--danger);\n    font-weight: 600;\n}\n\n.payment-history {\n    margin-top: 1rem;\n    border-top: 1px solid var(--border);\n    padding-top: 1rem;\n}\n\n.payment-history-title {\n    font-size: 1rem;\n    font-weight: 600;\n    margin-bottom: 0.75rem;\n    color: var(--text);\n}\n\n.payment-item {\n    display: flex;\n    justify-content: space-between;\n    padding: 0.5rem 0;\n    border-bottom: 1px solid var(--border);\n}\n\n.payment-item:last-child {\n    border-bottom: none;\n}\n\n.payment-date {\n    font-size: 0.875rem;\n    color: var(--text-light);\n}\n\n.payment-amount {\n    font-weight: 600;\n}\n\n.payment-principal {\n    font-size: 0.75rem;\n    color: var(--success);\n}\n\n.debt-actions {\n    display: flex;\n    gap: 0.5rem;\n    margin-top: 1rem;\n    flex-wrap: wrap;\n}\n\n.recommendation {\n    background: var(--primary-light);\n    padding: 0.75rem;\n    border-radius: var(--radius-sm);\n    margin-top: 1rem;\n    font-size: 0.875rem;\n}\n\n.recommendation-warning {\n    background: rgba(220, 38, 38, 0.1);\n    color: var(--danger);\n}\n\n.recommendation-tip {\n    background: rgba(16, 185, 129, 0.1);\n    color: var(--success);\n}\n\n.custom-type-form {\n    display: grid;\n    grid-template-columns: 1fr auto;\n    gap: 0.5rem;\n    margin-top: 0.5rem;\n}\n\n.custom-type-container {\n    display: none;\n    margin-top: 0.5rem;\n}\n\n.custom-type-container.visible {\n    display: grid;\n    grid-template-columns: 1fr;\n    gap: 0.5rem;\n    animation: fadeIn 0.3s ease;\n}\n\n@keyframes fadeIn {\n    from { opacity: 0; transform: translateY(10px); }\n    to { opacity: 1; transform: translateY(0); }\n}\n\n@media (min-width: 640px) {\n    .expense-form {\n        grid-template-columns: repeat(2, 1fr);\n        gap: 1rem;\n    }\n    .btn {\n        padding: 0.875rem 1.5rem;\n        font-size: 0.9375rem;\n    }\n    .btn span {\n        display: inline;\n    }\n    .card {\n        padding: 2rem;\n    }\n    .card-title {\n        font-size: 1.5rem;\n    }\n    .modal-content {\n        padding: 2rem;\n    }\n    .modal-title {\n        font-size: 1.5rem;\n    }\n}\n\n@media (min-width: 768px) {\n    .summary-grid {\n        grid-template-columns: repeat(5, 1fr);\n    }\n}\n\n@media (max-width: 640px) {\n    .logo-text {\n        font-size: 1.75rem;\n    }\n    .logo-icon {\n        width: 2.25rem;\n        height: 2.25rem;\n        font-size: 1.25rem;\n    }\n    .btn {\n        padding: 0.75rem;\n        font-size: 0.875rem;\n        min-height: 2.5rem;\n    }\n    .btn span {\n        display: none;\n    }\n    .card {\n        padding: 1.25rem;\n        margin-bottom: 1rem;\n    }\n    .card-title {\n        font-size: 1.25rem;\n    }\n    .summary-item {\n        padding: 0.75rem;\n    }\n    .summary-label {\n        font-size: 0.8125rem;\n    }\n    .summary-value {\n        font-size: 1.5rem;\n    }\n    .tab {\n        padding: 0.625rem 0.875rem;\n        font-size: 0.875rem;\n    }\n    .form-control {\n        padding: 0.625rem;\n        font-size: 0.875rem;\n    }\n    .expense-table th,\n    .expense-table td {\n        font-size: 0.8125rem;\n    }\n    .modal-content {\n        padding: 1.5rem;\n        max-width: 95%;\n    }\n    .modal-title {\n        font-size: 1.125rem;\n    }\n    .close-modal {\n        font-size: 1.25rem;\n    }\n    .debt-details {\n        grid-template-columns: 1fr;\n    }\n    .debt-actions {\n        flex-direction: column;\n    }\n    .debt-actions .btn {\n        width: 100%;\n        justify-content: center;\n    }\n}\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <header class=\"header\">\n            <div class=\"logo\">\n            </div>\n            <div class=\"controls\">\n                <button class=\"theme-toggle\" id=\"theme-toggle\">\n                    <i class=\"fas fa-moon\"></i>\n                </button>\n                <div class=\"currency-selector-wrapper\">\n                    <select id=\"base-currency-selector\" class=\"currency-selector\">\n                        <!-- Currencies will be dynamically loaded here -->\n                    </select>\n                </div>\n            </div>\n        </header>\n\n        <div class=\"summary-grid\">\n            <div class=\"summary-item\">\n                <div class=\"summary-label\">Income YTD</div>\n                <div class=\"summary-value\" id=\"income-ytd\">$0.00</div>\n            </div>\n            <div class=\"summary-item\">\n                <div class=\"summary-label\">Total Debt</div>\n                <div class=\"summary-value\" id=\"total-debt\">$0.00</div>\n            </div>\n            <div class=\"summary-item\">\n                <div class=\"summary-label\">Investments</div>\n                <div class=\"summary-value\" id=\"investments-value\">$0.00</div>\n            </div>\n            <div class=\"summary-item\">\n                <div class=\"summary-label\">Savings Progress</div>\n                <div class=\"summary-value\" id=\"savings-progress\">0%</div>\n            </div>\n            <div class=\"summary-item\">\n                <div class=\"summary-label\">Month Shifts</div>\n                <div class=\"summary-value\" id=\"month-shifts\">0 hrs</div>\n            </div>\n        </div>\n\n        <div class=\"tabs\">\n            <div class=\"tab active\" data-tab=\"payroll\">Payroll</div>\n            <div class=\"tab\" data-tab=\"shifts\">Shifts</div>\n            <div class=\"tab\" data-tab=\"debts\">Debts</div>\n            <div class=\"tab\" data-tab=\"investments\">Investments</div>\n            <div class=\"tab\" data-tab=\"savings\">Savings</div>\n        </div>\n\n        <!-- Payroll Section -->\n        <div class=\"section active\" id=\"payroll\">\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    <div class=\"card-title\">Employers</div>\n                    <button class=\"btn btn-primary\" onclick=\"openModal('employer')\">\n                        <i class=\"fas fa-plus\"></i>\n                        <span>Add Employer</span>\n                    </button>\n                </div>\n                <div class=\"expense-table-container\">\n                    <table class=\"expense-table\">\n                        <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th>Pay Schedule</th>\n                                <th>Base Rate</th>\n                                <th>Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody id=\"employers-list\">\n                            <!-- Employers will be added here dynamically -->\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    <div class=\"card-title\">Pay Runs</div>\n                    <button class=\"btn btn-primary\" onclick=\"openModal('payrun')\">\n                        <i class=\"fas fa-plus\"></i>\n                        <span>Add Pay Run</span>\n                    </button>\n                </div>\n                <div class=\"expense-table-container\">\n                    <table class=\"expense-table\">\n                        <thead>\n                            <tr>\n                                <th>Period</th>\n                                <th>Employer</th>\n                                <th>Gross Pay</th>\n                                <th>Net Pay</th>\n                                <th>Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody id=\"payruns-list\">\n                            <!-- Pay runs will be added here dynamically -->\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n\n        <!-- Shifts Section -->\n        <div class=\"section\" id=\"shifts\">\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    <div class=\"card-title\">Shifts</div>\n                    <button class=\"btn btn-primary\" onclick=\"openModal('shift')\">\n                        <i class=\"fas fa-plus\"></i>\n                        <span>Add Shift</span>\n                    </button>\n                </div>\n                <div class=\"expense-table-container\">\n                    <table class=\"expense-table\">\n                        <thead>\n                            <tr>\n                                <th>Date</th>\n                                <th>Start Time</th>\n                                <th>End Time</th>\n                                <th>Hours</th>\n                                <th>Employer</th>\n                                <th>Earnings</th>\n                                <th>Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody id=\"shifts-list\">\n                            <!-- Shifts will be added here dynamically -->\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n\n        <!-- Debts Section -->\n        <div class=\"section\" id=\"debts\">\n            <div class=\"stats-grid\">\n                <div class=\"stat-card\">\n                    <div class=\"stat-label\">Total Debt</div>\n                    <div class=\"stat-value\" id=\"debt-total\">$0.00</div>\n                </div>\n                <div class=\"stat-card\">\n                    <div class=\"stat-label\">Min Payments</div>\n                    <div class=\"stat-value\" id=\"debt-min-payments\">$0.00</div>\n                </div>\n                <div class=\"stat-card\">\n                    <div class=\"stat-label\">This Month</div>\n                    <div class=\"stat-value\" id=\"debt-this-month\">$0.00</div>\n                </div>\n            </div>\n\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    <div class=\"card-title\">Debts</div>\n                    <button class=\"btn btn-primary\" onclick=\"openModal('debt')\">\n                        <i class=\"fas fa-plus\"></i>\n                        <span>Add Debt</span>\n                    </button>\n                </div>\n                <div id=\"debts-container\">\n                    <!-- Debt cards will be dynamically inserted here -->\n                </div>\n\n                <!-- Empty state -->\n                <div id=\"debts-empty-state\" class=\"empty-state\" style=\"display: none;\">\n                    <i class=\"fas fa-credit-card\"></i>\n                    <p>No debts added yet</p>\n                </div>\n            </div>\n        </div>\n\n        <!-- Investments Section -->\n        <div class=\"section\" id=\"investments\">\n            <div class=\"stats-grid\">\n                <div class=\"stat-card\">\n                    <div class=\"stat-label\">Portfolio Value</div>\n                    <div class=\"stat-value\" id=\"portfolio-value\">$0.00</div>\n                </div>\n                <div class=\"stat-card\">\n                    <div class=\"stat-label\">Total Gain/Loss</div>\n                    <div class=\"stat-value\" id=\"investment-gain\">+$0.00</div>\n                </div>\n                <div class=\"stat-card\">\n                    <div class=\"stat-label\">Holdings</div>\n                    <div class=\"stat-value\" id=\"holdings-count\">0</div>\n                </div>\n            </div>\n\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    <div class=\"card-title\">Investment Accounts</div>\n                    <button class=\"btn btn-primary\" onclick=\"openModal('investment-account')\">\n                        <i class=\"fas fa-plus\"></i>\n                        <span>Add Account</span>\n                    </button>\n                </div>\n                <div class=\"expense-table-container\">\n                    <table class=\"expense-table\">\n                        <thead>\n                            <tr>\n                                <th>Account Name</th>\n                                <th>Type</th>\n                                <th>Value</th>\n                                <th>Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody id=\"investment-accounts-list\">\n                            <!-- Investment accounts will be added here dynamically -->\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    <div class=\"card-title\">Investments</div>\n                    <button class=\"btn btn-primary\" onclick=\"openModal('investment')\">\n                        <i class=\"fas fa-plus\"></i>\n                        <span>Add Investment</span>\n                    </button>\n                </div>\n                <div class=\"expense-table-container\">\n                    <table class=\"expense-table\">\n                        <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th>Symbol</th>\n                                <th>Quantity</th>\n                                <th>Value</th>\n                                <th>Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody id=\"investments-list\">\n                            <!-- Investments will be added here dynamically -->\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n\n        <!-- Savings Section -->\n        <div class=\"section\" id=\"savings\">\n            <div class=\"stats-grid\">\n                <div class=\"stat-card\">\n                    <div class=\"stat-label\">Total Saved</div>\n                    <div class=\"stat-value\" id=\"total-saved\">$0.00</div>\n                </div>\n                <div class=\"stat-card\">\n                    <div class=\"stat-label\">This Month</div>\n                    <div class=\"stat-value\" id=\"savings-this-month\">$0.00</div>\n                </div>\n                <div class=\"stat-card\">\n                    <div class=\"stat-label\">Completed Goals</div>\n                    <div class=\"stat-value\" id=\"completed-goals\">0</div>\n                </div>\n            </div>\n\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    <div class=\"card-title\">Savings Goals</div>\n                    <button class=\"btn btn-primary\" onclick=\"openModal('savings')\">\n                        <i class=\"fas fa-plus\"></i>\n                        <span>Add Goal</span>\n                    </button>\n                </div>\n                <div class=\"expense-table-container\">\n                    <table class=\"expense-table\">\n                        <thead>\n                            <tr>\n                                <th>Goal</th>\n                                <th>Target</th>\n                                <th>Progress</th>\n                                <th>Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody id=\"savings-list\">\n                            <!-- Savings goals will be added here dynamically -->\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <!-- Modal for adding/editing items -->\n    <div class=\"modal\" id=\"modal\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <h2 class=\"modal-title\" id=\"modal-title\">Add Item</h2>\n                <button class=\"close-modal\" onclick=\"closeModal()\">\n                    <i class=\"fas fa-times\"></i>\n                </button>\n            </div>\n            <form id=\"modal-form\">\n                <div class=\"expense-form\" id=\"modal-form-content\">\n                    <!-- Form content will be dynamically inserted here -->\n                </div>\n                <div style=\"margin-top: 1rem; display: flex; gap: 0.5rem; justify-content: flex-end;\">\n                    <button type=\"button\" class=\"btn\" onclick=\"closeModal()\">Cancel</button>\n                    <button type=\"submit\" class=\"btn btn-primary\">Save</button>\n                </div>\n            </form>\n        </div>\n    </div>\n\n    <!-- Payment Modal -->\n    <div class=\"modal\" id=\"payment-modal\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <h2 class=\"modal-title\" id=\"payment-modal-title\">Record Payment</h2>\n                <button class=\"close-modal\" onclick=\"closePaymentModal()\">\n                    <i class=\"fas fa-times\"></i>\n                </button>\n            </div>\n            <form id=\"payment-form\">\n                <div class=\"expense-form\" id=\"payment-form-content\">\n                    <!-- Payment form content will be dynamically inserted here -->\n                </div>\n                <div style=\"margin-top: 1rem; display: flex; gap: 0.5rem; justify-content: flex-end;\">\n                    <button type=\"button\" class=\"btn\" onclick=\"closePaymentModal()\">Cancel</button>\n                    <button type=\"submit\" class=\"btn btn-primary\">Record Payment</button>\n                </div>\n            </form>\n        </div>\n    </div>\n\n    <script>\n        // Global data storage\n        const financeData = {\n            employers: [],\n            payRuns: [],\n            shifts: [],\n            debts: [],\n            investmentAccounts: [],\n            investments: [],\n            savingsGoals: [],\n            currency: 'USD',\n            theme: 'light'\n        };\n\n        // DOM Elements\n        const themeToggle = document.getElementById('theme-toggle');\n        const baseCurrencySelector = document.getElementById('base-currency-selector');\n        const modal = document.getElementById('modal');\n        const paymentModal = document.getElementById('payment-modal');\n        const modalTitle = document.getElementById('modal-title');\n        const modalForm = document.getElementById('modal-form');\n        const modalFormContent = document.getElementById('modal-form-content');\n        const paymentForm = document.getElementById('payment-form');\n        const paymentFormContent = document.getElementById('payment-form-content');\n        const tabs = document.querySelectorAll('.tab');\n        const sections = document.querySelectorAll('.section');\n\n        // Initialize the application\n        function initApp() {\n            loadCurrencies();\n            loadTheme();\n            setupEventListeners();\n            loadData();\n            updateUI();\n        }\n\n        // Set up event listeners\n        function setupEventListeners() {\n            // Theme toggle\n            themeToggle.addEventListener('click', toggleTheme);\n\n            // Currency selector\n            baseCurrencySelector.addEventListener('change', (e) => {\n                financeData.currency = e.target.value;\n                updateUI();\n                saveData();\n            });\n\n            // Tab switching\n            tabs.forEach(tab => {\n                tab.addEventListener('click', () => {\n                    const tabName = tab.getAttribute('data-tab');\n                    switchTab(tabName);\n                });\n            });\n\n            // Modal form submission\n            modalForm.addEventListener('submit', handleFormSubmit);\n\n            // Payment form submission\n            paymentForm.addEventListener('submit', handlePaymentSubmit);\n        }\n\n        // Load available currencies\n        function loadCurrencies() {\n            const currencies = [\n                'USD', 'EUR', 'GBP', 'JPY', 'CAD', 'AUD', 'CHF', 'CNY', 'INR', 'BRL'\n            ];\n\n            baseCurrencySelector.innerHTML = '';\n            currencies.forEach(currency => {\n                const option = document.createElement('option');\n                option.value = currency;\n                option.textContent = currency;\n                baseCurrencySelector.appendChild(option);\n            });\n\n            baseCurrencySelector.value = financeData.currency;\n        }\n\n        // Theme management\n        function loadTheme() {\n            const savedTheme = localStorage.getItem('financeHubTheme') || 'light';\n            financeData.theme = savedTheme;\n            document.documentElement.setAttribute('data-theme', savedTheme);\n            updateThemeIcon();\n        }\n\n        function toggleTheme() {\n            financeData.theme = financeData.theme === 'light' ? 'dark' : 'light';\n            document.documentElement.setAttribute('data-theme', financeData.theme);\n            localStorage.setItem('financeHubTheme', financeData.theme);\n            updateThemeIcon();\n        }\n\n        function updateThemeIcon() {\n            const icon = themeToggle.querySelector('i');\n            if (financeData.theme === 'dark') {\n                icon.className = 'fas fa-sun';\n            } else {\n                icon.className = 'fas fa-moon';\n            }\n        }\n\n        // Tab management\n        function switchTab(tabName) {\n            tabs.forEach(tab => {\n                if (tab.getAttribute('data-tab') === tabName) {\n                    tab.classList.add('active');\n                } else {\n                    tab.classList.remove('active');\n                }\n            });\n\n            sections.forEach(section => {\n                if (section.id === tabName) {\n                    section.classList.add('active');\n                } else {\n                    section.classList.remove('active');\n                }\n            });\n        }\n\n        // Modal management\n         // Enhanced openModal function to set up custom type handlers\n        function openModal(type, id = null) {\n            modalTitle.textContent = getModalTitle(type, id);\n            modalFormContent.innerHTML = getFormContent(type, id);\n            modal.classList.add('active');\n            modal.setAttribute('data-type', type);\n            if (id !== null) modal.setAttribute('data-id', id);\n\n            // Set up employer change listener for shift form\n            if (type === 'shift') {\n                setTimeout(() => {\n                    const employerSelect = document.getElementById('shift-employer');\n                    if (employerSelect) {\n                        employerSelect.addEventListener('change', updateShiftHourlyRate);\n                    }\n                }, 100);\n            }\n\n            // Set up custom type handlers for debt and investment account forms\n            if (type === 'debt' || type === 'investment-account') {\n                setTimeout(() => {\n                    const typeSelect = document.getElementById(`${type === 'debt' ? 'debt' : 'account'}-type`);\n                    const customContainer = document.getElementById(`${type === 'debt' ? 'debt' : 'account'}-custom-type-container`);\n\n                    if (typeSelect && customContainer) {\n                        typeSelect.addEventListener('change', function() {\n                            if (this.value === 'other') {\n                                customContainer.classList.add('visible');\n                            } else {\n                                customContainer.classList.remove('visible');\n                            }\n                        });\n                    }\n                }, 100);\n            }\n        }\n\n        function closeModal() {\n            modal.classList.remove('active');\n            modal.removeAttribute('data-type');\n            modal.removeAttribute('data-id');\n        }\n\n        function openPaymentModal(debtId) {\n            paymentFormContent.innerHTML = getPaymentFormContent(debtId);\n            paymentModal.classList.add('active');\n            paymentModal.setAttribute('data-debt-id', debtId);\n        }\n\n        function closePaymentModal() {\n            paymentModal.classList.remove('active');\n            paymentModal.removeAttribute('data-debt-id');\n        }\n\n        function getModalTitle(type, id) {\n            const actions = {\n                'employer': id ? 'Edit Employer' : 'Add Employer',\n                'payrun': id ? 'Edit Pay Run' : 'Add Pay Run',\n                'shift': id ? 'Edit Shift' : 'Add Shift',\n                'debt': id ? 'Edit Debt' : 'Add Debt',\n                'investment-account': id ? 'Edit Investment Account' : 'Add Investment Account',\n                'investment': id ? 'Edit Investment' : 'Add Investment',\n                'savings': id ? 'Edit Savings Goal' : 'Add Savings Goal'\n            };\n            return actions[type] || 'Add Item';\n        }\n\n        function getFormContent(type, id) {\n            const forms = {\n                'employer': getEmployerForm(id),\n                'payrun': getPayRunForm(id),\n                'shift': getShiftForm(id),\n                'debt': getDebtForm(id),\n                'investment-account': getInvestmentAccountForm(id),\n                'investment': getInvestmentForm(id),\n                'savings': getSavingsForm(id)\n            };\n            return forms[type] || '';\n        }\n\n        function getPaymentFormContent(debtId) {\n            const debt = financeData.debts.find(d => d.id === debtId);\n            if (!debt) return '';\n\n            return `\n                <div class=\"form-group\">\n                    <label for=\"payment-amount\">Payment Amount</label>\n                    <input type=\"number\" id=\"payment-amount\" class=\"form-control\" step=\"0.01\" min=\"0\" required>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"payment-date\">Payment Date</label>\n                    <input type=\"date\" id=\"payment-date\" class=\"form-control\" required value=\"${new Date().toISOString().split('T')[0]}\">\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"payment-notes\">Notes (Optional)</label>\n                    <input type=\"text\" id=\"payment-notes\" class=\"form-control\">\n                </div>\n            `;\n        }\n\n        // Form content generators\n        function getEmployerForm(id) {\n            let employer = null;\n            if (id) {\n                employer = financeData.employers.find(e => e.id === id);\n            }\n\n            return `\n                <div class=\"form-group\">\n                    <label for=\"employer-name\">Employer Name</label>\n                    <input type=\"text\" id=\"employer-name\" class=\"form-control\" value=\"${employer ? employer.name : ''}\" required>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"pay-schedule\">Pay Schedule</label>\n                    <select id=\"pay-schedule\" class=\"form-control\" required>\n                        <option value=\"weekly\" ${employer && employer.paySchedule === 'weekly' ? 'selected' : ''}>Weekly</option>\n                        <option value=\"bi-weekly\" ${employer && employer.paySchedule === 'bi-weekly' ? 'selected' : ''}>Bi-Weekly</option>\n                        <option value=\"monthly\" ${employer && employer.paySchedule === 'monthly' ? 'selected' : ''}>Monthly</option>\n                    </select>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"base-rate\">Base Rate ($/hr)</label>\n                    <input type=\"number\" id=\"base-rate\" class=\"form-control\" step=\"0.01\" min=\"0\" value=\"${employer ? employer.baseRate : ''}\" required>\n                </div>\n            `;\n        }\n\n        function getPayRunForm(id) {\n            let payrun = null;\n            if (id) {\n                payrun = financeData.payRuns.find(p => p.id === id);\n            }\n\n            let employersOptions = '';\n            financeData.employers.forEach(employer => {\n                employersOptions += `<option value=\"${employer.id}\" ${payrun && payrun.employerId === employer.id ? 'selected' : ''}>${employer.name}</option>`;\n            });\n\n            return `\n                <div class=\"form-group\">\n                    <label for=\"payrun-employer\">Employer</label>\n                    <select id=\"payrun-employer\" class=\"form-control\" required>\n                        <option value=\"\">Select Employer</option>\n                        ${employersOptions}\n                    </select>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"payrun-period-start\">Period Start</label>\n                    <input type=\"date\" id=\"payrun-period-start\" class=\"form-control\" value=\"${payrun ? payrun.periodStart : ''}\" required>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"payrun-period-end\">Period End</label>\n                    <input type=\"date\" id=\"payrun-period-end\" class=\"form-control\" value=\"${payrun ? payrun.periodEnd : ''}\" required>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"payrun-gross\">Gross Pay</label>\n                    <input type=\"number\" id=\"payrun-gross\" class=\"form-control\" step=\"0.01\" min=\"0\" value=\"${payrun ? payrun.grossPay : ''}\" required>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"payrun-net\">Net Pay</label>\n                    <input type=\"number\" id=\"payrun-net\" class=\"form-control\" step=\"0.01\" min=\"0\" value=\"${payrun ? payrun.netPay : ''}\" required>\n                </div>\n            `;\n        }\n\n        function getShiftForm(id) {\n            let shift = null;\n            if (id) {\n                shift = financeData.shifts.find(s => s.id === id);\n            }\n\n            let employersOptions = '<option value=\"\">None</option>';\n            financeData.employers.forEach(employer => {\n                employersOptions += `<option value=\"${employer.id}\" ${shift && shift.employerId === employer.id ? 'selected' : ''}>${employer.name}</option>`;\n            });\n\n            // Calculate default rate based on selected employer\n            let defaultRate = '';\n            if (shift && shift.employerId) {\n                const employer = financeData.employers.find(e => e.id === shift.employerId);\n                if (employer) defaultRate = employer.baseRate;\n            }\n\n            return `\n                <div class=\"form-group\">\n                    <label for=\"shift-date\">Date</label>\n                    <input type=\"date\" id=\"shift-date\" class=\"form-control\" value=\"${shift ? shift.date : new Date().toISOString().split('T')[0]}\" required>\n                </div>\n\n                <div class=\"form-group\">\n                    <label for=\"shift-start-time\">Start Time</label>\n                    <input type=\"time\" id=\"shift-start-time\" class=\"form-control\" value=\"${shift ? shift.startTime : '09:00'}\" required>\n                </div>\n\n                <div class=\"form-group\">\n                    <label for=\"shift-end-time\">End Time</label>\n                    <input type=\"time\" id=\"shift-end-time\" class=\"form-control\" value=\"${shift ? shift.endTime : '17:00'}\" required>\n                </div>\n\n                <div class=\"form-group\">\n                    <label for=\"shift-break\">Break (minutes)</label>\n                    <input type=\"number\" id=\"shift-break\" class=\"form-control\" min=\"0\" value=\"${shift ? shift.breakMinutes : '30'}\" required>\n                </div>\n\n                <div class=\"form-group\">\n                    <label for=\"shift-employer\">Employer</label>\n                    <select id=\"shift-employer\" class=\"form-control\">\n                        ${employersOptions}\n                    </select>\n                </div>\n\n                <div class=\"form-group\">\n                    <label for=\"shift-role\">Role (Optional)</label>\n                    <input type=\"text\" id=\"shift-role\" class=\"form-control\" placeholder=\"e.g., Server, Cashier\" value=\"${shift ? shift.role : ''}\">\n                </div>\n\n                <div class=\"form-group\">\n                    <label for=\"shift-rate\">Hourly Rate ($)</label>\n                    <input type=\"number\" id=\"shift-rate\" class=\"form-control\" step=\"0.01\" min=\"0\" value=\"${shift ? shift.rate : defaultRate}\" required>\n                </div>\n\n                <div class=\"form-group\">\n                    <label for=\"shift-tips\">Tips ($)</label>\n                    <input type=\"number\" id=\"shift-tips\" class=\"form-control\" step=\"0.01\" min=\"0\" value=\"${shift ? shift.tips : '0'}\">\n                </div>\n\n                <div class=\"form-group\">\n                    <label for=\"shift-location\">Location (Optional)</label>\n                    <input type=\"text\" id=\"shift-location\" class=\"form-control\" placeholder=\"e.g., Downtown, Mall\" value=\"${shift ? shift.location : ''}\">\n                </div>\n\n                <div class=\"form-group\">\n                    <label for=\"shift-notes\">Notes (Optional)</label>\n                    <textarea id=\"shift-notes\" class=\"form-control\" rows=\"3\" placeholder=\"Any additional notes about this shift...\">${shift ? shift.notes : ''}</textarea>\n                </div>\n            `;\n        }\n\n        function updateShiftHourlyRate() {\n            const employerSelect = document.getElementById('shift-employer');\n            const rateInput = document.getElementById('shift-rate');\n\n            if (employerSelect && rateInput) {\n                const employerId = employerSelect.value;\n                if (employerId) {\n                    const employer = financeData.employers.find(e => e.id === employerId);\n                    if (employer) {\n                        rateInput.value = employer.baseRate;\n                    }\n                }\n            }\n        }\n\n                // Enhanced getDebtForm function with custom type input\n        function getDebtForm(id) {\n            let debt = null;\n            if (id) {\n                debt = financeData.debts.find(d => d.id === id);\n            }\n\n            // Check if we have a custom type\n            const isCustomType = debt && !['credit-card', 'mortgage', 'student-loan', 'car-loan', 'personal-loan'].includes(debt.type);\n            const customTypeValue = isCustomType ? debt.type : '';\n\n            return `\n                <div class=\"form-group\">\n                    <label for=\"debt-lender\">Lender Name</label>\n                    <input type=\"text\" id=\"debt-lender\" class=\"form-control\" value=\"${debt ? debt.lender : ''}\" required>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"debt-type\">Debt Type</label>\n                    <select id=\"debt-type\" class=\"form-control\" required>\n                        <option value=\"credit-card\" ${debt && debt.type === 'credit-card' ? 'selected' : ''}>Credit Card</option>\n                        <option value=\"mortgage\" ${debt && debt.type === 'mortgage' ? 'selected' : ''}>Mortgage</option>\n                        <option value=\"student-loan\" ${debt && debt.type === 'student-loan' ? 'selected' : ''}>Student Loan</option>\n                        <option value=\"car-loan\" ${debt && debt.type === 'car-loan' ? 'selected' : ''}>Car Loan</option>\n                        <option value=\"personal-loan\" ${debt && debt.type === 'personal-loan' ? 'selected' : ''}>Personal Loan</option>\n                        <option value=\"other\" ${isCustomType ? 'selected' : ''}>Other</option>\n                    </select>\n                </div>\n                <div class=\"custom-type-container ${isCustomType ? 'visible' : ''}\" id=\"debt-custom-type-container\">\n                    <div class=\"form-group\">\n                        <label for=\"debt-custom-type\">Custom Debt Type</label>\n                        <input type=\"text\" id=\"debt-custom-type\" class=\"form-control\" value=\"${customTypeValue}\" placeholder=\"Enter custom debt type\">\n                    </div>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"debt-balance\">Current Balance</label>\n                    <input type=\"number\" id=\"debt-balance\" class=\"form-control\" step=\"0.01\" min=\"0\" value=\"${debt ? debt.balance : ''}\" required>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"debt-limit\">Credit Limit/Loan Amount</label>\n                    <input type=\"number\" id=\"debt-limit\" class=\"form-control\" step=\"0.01\" min=\"0\" value=\"${debt ? debt.limit : ''}\" required>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"debt-apr\">APR (%)</label>\n                    <input type=\"number\" id=\"debt-apr\" class=\"form-control\" step=\"0.01\" min=\"0\" value=\"${debt ? debt.apr : ''}\" required>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"debt-min-payment\">Minimum Payment</label>\n                    <input type=\"number\" id=\"debt-min-payment\" class=\"form-control\" step=\"0.01\" min=\"0\" value=\"${debt ? debt.minPayment : ''}\" required>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"debt-due-date\">Payment Due Date (day of month)</label>\n                    <input type=\"number\" id=\"debt-due-date\" class=\"form-control\" min=\"1\" max=\"31\" value=\"${debt ? debt.dueDate : ''}\" required>\n                </div>\n            `;\n        }\n\n\n        // Enhanced getInvestmentAccountForm function with custom type input\n        function getInvestmentAccountForm(id) {\n            let account = null;\n            if (id) {\n                account = financeData.investmentAccounts.find(a => a.id === id);\n            }\n\n            // Check if we have a custom type\n            const isCustomType = account && !['brokerage', 'ira', 'roth-ira', '401k', 'hsa'].includes(account.type);\n            const customTypeValue = isCustomType ? account.type : '';\n\n            return `\n                <div class=\"form-group\">\n                    <label for=\"account-name\">Account Name</label>\n                    <input type=\"text\" id=\"account-name\" class=\"form-control\" value=\"${account ? account.name : ''}\" required>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"account-type\">Account Type</label>\n                    <select id=\"account-type\" class=\"form-control\" required>\n                        <option value=\"brokerage\" ${account && account.type === 'brokerage' ? 'selected' : ''}>Brokerage</option>\n                        <option value=\"ira\" ${account && account.type === 'ira' ? 'selected' : ''}>IRA</option>\n                        <option value=\"roth-ira\" ${account && account.type === 'roth-ira' ? 'selected' : ''}>Roth IRA</option>\n                        <option value=\"401k\" ${account && account.type === '401k' ? 'selected' : ''}>401(k)</option>\n                        <option value=\"hsa\" ${account && account.type === 'hsa' ? 'selected' : ''}>HSA</option>\n                        <option value=\"other\" ${isCustomType ? 'selected' : ''}>Other</option>\n                    </select>\n                </div>\n                <div class=\"custom-type-container ${isCustomType ? 'visible' : ''}\" id=\"account-custom-type-container\">\n                    <div class=\"form-group\">\n                        <label for=\"account-custom-type\">Custom Account Type</label>\n                        <input type=\"text\" id=\"account-custom-type\" class=\"form-control\" value=\"${customTypeValue}\" placeholder=\"Enter custom account type\">\n                    </div>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"account-value\">Current Value</label>\n                    <input type=\"number\" id=\"account-value\" class=\"form-control\" step=\"0.01\" min=\"0\" value=\"${account ? account.value : ''}\" required>\n                </div>\n            `;\n        }\n\n        function getInvestmentForm(id) {\n            let investment = null;\n            if (id) {\n                investment = financeData.investments.find(i => i.id === id);\n            }\n\n            let accountsOptions = '';\n            financeData.investmentAccounts.forEach(account => {\n                accountsOptions += `<option value=\"${account.id}\" ${investment && investment.accountId === account.id ? 'selected' : ''}>${account.name}</option>`;\n            });\n\n            return `\n                <div class=\"form-group\">\n                    <label for=\"investment-account\">Investment Account</label>\n                    <select id=\"investment-account\" class=\"form-control\" required>\n                        <option value=\"\">Select Account</option>\n                        ${accountsOptions}\n                    </select>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"investment-name\">Investment Name</label>\n                    <input type=\"text\" id=\"investment-name\" class=\"form-control\" value=\"${investment ? investment.name : ''}\" required>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"investment-symbol\">Symbol (Optional)</label>\n                    <input type=\"text\" id=\"investment-symbol\" class=\"form-control\" value=\"${investment ? investment.symbol : ''}\">\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"investment-quantity\">Quantity/Shares</label>\n                    <input type=\"number\" id=\"investment-quantity\" class=\"form-control\" step=\"0.001\" min=\"0\" value=\"${investment ? investment.quantity : ''}\" required>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"investment-price\">Price per Share/Unit</label>\n                    <input type=\"number\" id=\"investment-price\" class=\"form-control\" step=\"0.01\" min=\"0\" value=\"${investment ? investment.price : ''}\" required>\n                </div>\n            `;\n        }\n\n        function getSavingsForm(id) {\n            let goal = null;\n            if (id) {\n                goal = financeData.savingsGoals.find(g => g.id === id);\n            }\n\n            return `\n                <div class=\"form-group\">\n                    <label for=\"savings-goal\">Goal Name</label>\n                    <input type=\"text\" id=\"savings-goal\" class=\"form-control\" value=\"${goal ? goal.name : ''}\" required>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"savings-target\">Target Amount</label>\n                    <input type=\"number\" id=\"savings-target\" class=\"form-control\" step=\"0.01\" min=\"0\" value=\"${goal ? goal.target : ''}\" required>\n                </div>\n                    <label for=\"savings-saved\">Currently Saved</label>\n                    <input type=\"number\" id=\"savings-saved\" class=\"form-control\" step=\"0.01\" min=\"0\" value=\"${goal ? goal.saved : ''}\" required>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"savings-deadline\">Target Date (Optional)</label>\n                    <input type=\"date\" id=\"savings-deadline\" class=\"form-control\" value=\"${goal ? goal.deadline : ''}\">\n                </div>\n            `;\n        }\n\n        // Form submission handlers\n        function handleFormSubmit(e) {\n            e.preventDefault();\n            const type = modal.getAttribute('data-type');\n            const id = modal.getAttribute('data-id');\n\n            // Process form based on type\n            switch (type) {\n                case 'employer':\n                    saveEmployer(id);\n                    break;\n                case 'payrun':\n                    savePayRun(id);\n                    break;\n                case 'shift':\n                    saveShift(id);\n                    break;\n                case 'debt':\n                    saveDebt(id);\n                    break;\n                case 'investment-account':\n                    saveInvestmentAccount(id);\n                    break;\n                case 'investment':\n                    saveInvestment(id);\n                    break;\n                case 'savings':\n                    saveSavingsGoal(id);\n                    break;\n            }\n\n            closeModal();\n        }\n\n        function handlePaymentSubmit(e) {\n            e.preventDefault();\n            const debtId = paymentModal.getAttribute('data-debt-id');\n            const amount = parseFloat(document.getElementById('payment-amount').value);\n            const date = document.getElementById('payment-date').value;\n            const notes = document.getElementById('payment-notes').value;\n\n            if (!debtId || !amount || !date) return;\n\n            const debt = financeData.debts.find(d => d.id === debtId);\n            if (!debt) return;\n\n            // Create payment record\n            const payment = {\n                id: Date.now().toString(),\n                debtId,\n                amount,\n                date,\n                notes\n            };\n\n            // Update debt balance\n            debt.balance -= amount;\n            if (debt.balance < 0) debt.balance = 0;\n\n            // Add to payment history\n            if (!debt.paymentHistory) debt.paymentHistory = [];\n            debt.paymentHistory.push(payment);\n\n            saveData();\n            updateUI();\n            closePaymentModal();\n        }\n\n        // Data persistence\n        function saveData() {\n            localStorage.setItem('financeHubData', JSON.stringify(financeData));\n        }\n\n        function loadData() {\n            const savedData = localStorage.getItem('financeHubData');\n            if (savedData) {\n                const parsedData = JSON.parse(savedData);\n                Object.assign(financeData, parsedData);\n            }\n        }\n\n        // Update UI with current data\n        function updateUI() {\n            updateSummaryCards();\n            updateEmployersList();\n            updatePayRunsList();\n            updateShiftsList();\n            updateDebtsList();\n            updateInvestmentAccountsList();\n            updateInvestmentsList();\n            updateSavingsList();\n        }\n\n        function updateSummaryCards() {\n            // Calculate and update summary values\n            document.getElementById('income-ytd').textContent = formatCurrency(calculateYTDIncome());\n            document.getElementById('total-debt').textContent = formatCurrency(calculateTotalDebt());\n            document.getElementById('investments-value').textContent = formatCurrency(calculateInvestmentsValue());\n            document.getElementById('savings-progress').textContent = calculateSavingsProgress() + '%';\n            document.getElementById('month-shifts').textContent = calculateMonthShifts() + ' hrs';\n        }\n\n        // Calculation functions\n        function calculateYTDIncome() {\n            const currentYear = new Date().getFullYear();\n            return financeData.payRuns\n                .filter(payrun => new Date(payrun.periodEnd).getFullYear() === currentYear)\n                .reduce((total, payrun) => total + payrun.netPay, 0);\n        }\n\n        function calculateTotalDebt() {\n            return financeData.debts.reduce((total, debt) => total + debt.balance, 0);\n        }\n\n        function calculateInvestmentsValue() {\n            const accountsValue = financeData.investmentAccounts.reduce((total, account) => total + account.value, 0);\n            const investmentsValue = financeData.investments.reduce((total, investment) => total + (investment.quantity * investment.price), 0);\n            return accountsValue + investmentsValue;\n        }\n\n        function calculateSavingsProgress() {\n            if (financeData.savingsGoals.length === 0) return 0;\n            const totalTarget = financeData.savingsGoals.reduce((total, goal) => total + goal.target, 0);\n            const totalSaved = financeData.savingsGoals.reduce((total, goal) => total + goal.saved, 0);\n            return Math.round((totalSaved / totalTarget) * 100);\n        }\n\n        function calculateMonthShifts() {\n            const now = new Date();\n            const currentMonth = now.getMonth();\n            const currentYear = now.getFullYear();\n\n            return financeData.shifts\n                .filter(shift => {\n                    const shiftDate = new Date(shift.date);\n                    return shiftDate.getMonth() === currentMonth && shiftDate.getFullYear() === currentYear;\n                })\n                .reduce((total, shift) => total + calculateShiftHours(shift), 0);\n        }\n\n        function calculateShiftHours(shift) {\n            if (!shift.startTime || !shift.endTime) return shift.hours || 0;\n\n            // Parse time strings (format: HH:MM)\n            const [startHours, startMinutes] = shift.startTime.split(':').map(Number);\n            const [endHours, endMinutes] = shift.endTime.split(':').map(Number);\n\n            // Calculate total minutes\n            const startTotalMinutes = startHours * 60 + startMinutes;\n            const endTotalMinutes = endHours * 60 + endMinutes;\n\n            // Calculate difference in hours\n            let diffMinutes = endTotalMinutes - startTotalMinutes;\n            if (diffMinutes < 0) diffMinutes += 24 * 60; // Handle overnight shifts\n\n            // Subtract break time\n            diffMinutes -= (shift.breakMinutes || 0);\n\n            return Math.max(0, diffMinutes / 60);\n        }\n\n        function calculateShiftEarnings(shift) {\n            const hours = calculateShiftHours(shift);\n            const rate = shift.rate || 0;\n            const tips = shift.tips || 0;\n            return (hours * rate) + tips;\n        }\n\n        // Format currency based on selected currency\n        function formatCurrency(amount) {\n            return new Intl.NumberFormat('en-US', {\n                style: 'currency',\n                currency: financeData.currency\n            }).format(amount);\n        }\n\n        // List update functions\n        function updateEmployersList() {\n            const employersList = document.getElementById('employers-list');\n            employersList.innerHTML = '';\n\n            if (financeData.employers.length === 0) {\n                employersList.innerHTML = `\n                    <tr>\n                        <td colspan=\"4\" class=\"empty-state\">\n                            <i class=\"fas fa-building\"></i>\n                            <p>No employers added yet</p>\n                        </td>\n                    </tr>\n                `;\n                return;\n            }\n\n            financeData.employers.forEach(employer => {\n                const row = document.createElement('tr');\n                row.innerHTML = `\n                    <td>${employer.name}</td>\n                    <td>${employer.paySchedule}</td>\n                    <td>${formatCurrency(employer.baseRate)}/hr</td>\n                    <td>\n                        <button class=\"action-btn\" onclick=\"openModal('employer', '${employer.id}')\">\n                            <i class=\"fas fa-edit\"></i>\n                        </button>\n                        <button class=\"action-btn\" onclick=\"deleteEmployer('${employer.id}')\">\n                            <i class=\"fas fa-trash\"></i>\n                        </button>\n                    </td>\n                `;\n                employersList.appendChild(row);\n            });\n        }\n\n        function updatePayRunsList() {\n            const payrunsList = document.getElementById('payruns-list');\n            payrunsList.innerHTML = '';\n\n            if (financeData.payRuns.length === 0) {\n                payrunsList.innerHTML = `\n                    <tr>\n                        <td colspan=\"5\" class=\"empty-state\">\n                            <i class=\"fas fa-money-bill-wave\"></i>\n                            <p>No pay runs recorded yet</p>\n                        </td>\n                    </tr>\n                `;\n                return;\n            }\n\n            financeData.payRuns.forEach(payrun => {\n                const employer = financeData.employers.find(e => e.id === payrun.employerId) || { name: 'Unknown' };\n                const period = `${formatDate(payrun.periodStart)} - ${formatDate(payrun.periodEnd)}`;\n\n                const row = document.createElement('tr');\n                row.innerHTML = `\n                    <td>${period}</td>\n                    <td>${employer.name}</td>\n                    <td>${formatCurrency(payrun.grossPay)}</td>\n                    <td>${formatCurrency(payrun.netPay)}</td>\n                    <td>\n                        <button class=\"action-btn\" onclick=\"openModal('payrun', '${payrun.id}')\">\n                            <i class=\"fas fa-edit\"></i>\n                        </button>\n                        <button class=\"action-btn\" onclick=\"deletePayRun('${payrun.id}')\">\n                            <i class=\"fas fa-trash\"></i>\n                        </button>\n                    </td>\n                `;\n                payrunsList.appendChild(row);\n            });\n        }\n\n        function updateShiftsList() {\n            const shiftsList = document.getElementById('shifts-list');\n            shiftsList.innerHTML = '';\n\n            if (financeData.shifts.length === 0) {\n                shiftsList.innerHTML = `\n                    <tr>\n                        <td colspan=\"7\" class=\"empty-state\">\n                            <i class=\"fas fa-clock\"></i>\n                            <p>No shifts recorded yet</p>\n                        </td>\n                    </tr>\n                `;\n                return;\n            }\n\n            // Sort shifts by date (newest first)\n            const sortedShifts = [...financeData.shifts].sort((a, b) => new Date(b.date) - new Date(a.date));\n\n            sortedShifts.forEach(shift => {\n                const employer = financeData.employers.find(e => e.id === shift.employerId) || { name: 'None' };\n                const hours = calculateShiftHours(shift).toFixed(2);\n                const earnings = calculateShiftEarnings(shift);\n\n                const row = document.createElement('tr');\n                row.innerHTML = `\n                    <td>${formatDate(shift.date)}</td>\n                    <td>${shift.startTime || 'N/A'}</td>\n                    <td>${shift.endTime || 'N/A'}</td>\n                    <td>${hours} hrs</td>\n                    <td>${employer.name}</td>\n                    <td>${formatCurrency(earnings)}</td>\n                    <td>\n                        <button class=\"action-btn\" onclick=\"openModal('shift', '${shift.id}')\">\n                            <i class=\"fas fa-edit\"></i>\n                        </button>\n                        <button class=\"action-btn\" onclick=\"deleteShift('${shift.id}')\">\n                            <i class=\"fas fa-trash\"></i>\n                        </button>\n                    </td>\n                `;\n                shiftsList.appendChild(row);\n            });\n        }\n\n        function updateDebtsList() {\n            const debtsContainer = document.getElementById('debts-container');\n            const emptyState = document.getElementById('debts-empty-state');\n            debtsContainer.innerHTML = '';\n\n            if (financeData.debts.length === 0) {\n                emptyState.style.display = 'block';\n                return;\n            }\n\n            emptyState.style.display = 'none';\n\n            // Update debt stats\n            const totalDebt = calculateTotalDebt();\n            const minPayments = financeData.debts.reduce((total, debt) => total + debt.minPayment, 0);\n            const thisMonthDebt = financeData.debts.reduce((total, debt) => {\n                const dueDate = debt.dueDate;\n                const today = new Date();\n                const currentDay = today.getDate();\n\n                // If payment is due this month\n                if (currentDay <= dueDate) {\n                    return total + debt.minPayment;\n                }\n                return total;\n            }, 0);\n\n            document.getElementById('debt-total').textContent = formatCurrency(totalDebt);\n            document.getElementById('debt-min-payments').textContent = formatCurrency(minPayments);\n            document.getElementById('debt-this-month').textContent = formatCurrency(thisMonthDebt);\n\n            // Create debt cards\n            financeData.debts.forEach(debt => {\n                const utilization = debt.limit > 0 ? (debt.balance / debt.limit) * 100 : 0;\n                const aprClass = debt.apr >= 15 ? 'apr-high' : debt.apr >= 8 ? 'apr-medium' : 'apr-low';\n\n                const debtCard = document.createElement('div');\n                debtCard.className = 'debt-card fade-in';\n                debtCard.innerHTML = `\n                    <div class=\"debt-card-header\">\n                        <div class=\"debt-lender\">${debt.lender}</div>\n                        <div class=\"debt-type-badge\">${formatDebtType(debt.type)}</div>\n                    </div>\n\n                    <div class=\"debt-details\">\n                        <div class=\"debt-detail-item\">\n                            <div class=\"debt-detail-label\">Balance</div>\n                            <div class=\"debt-detail-value\">${formatCurrency(debt.balance)}</div>\n                        </div>\n                        <div class=\"debt-detail-item\">\n                            <div class=\"debt-detail-label\">Limit/Original</div>\n                            <div class=\"debt-detail-value\">${formatCurrency(debt.limit)}</div>\n                        </div>\n                        <div class=\"debt-detail-item\">\n                            <div class=\"debt-detail-label\">APR</div>\n                            <div class=\"debt-detail-value\"><span class=\"debt-apr ${aprClass}\">${debt.apr}%</span></div>\n                        </div>\n                        <div class=\"debt-detail-item\">\n                            <div class=\"debt-detail-label\">Min Payment</div>\n                            <div class=\"debt-detail-value\">${formatCurrency(debt.minPayment)}</div>\n                        </div>\n                    </div>\n\n                    ${debt.limit > 0 ? `\n                    <div class=\"progress-container\">\n                        <div class=\"progress-bar\">\n                            <div class=\"progress-fill\" style=\"width: ${utilization}%;\"></div>\n                        </div>\n                        <div class=\"progress-info\">\n                            <span>Credit Utilization</span>\n                            <span>${utilization.toFixed(1)}%</span>\n                        </div>\n                        ${utilization > 30 ? `<div class=\"utilization-warning\">High utilization may affect credit score</div>` : ''}\n                    </div>\n                    ` : ''}\n\n                    <div class=\"debt-actions\">\n                        <button class=\"btn\" onclick=\"openPaymentModal('${debt.id}')\">\n                            <i class=\"fas fa-money-bill-wave\"></i>\n                            <span>Record Payment</span>\n                        </button>\n                        <button class=\"btn\" onclick=\"openModal('debt', '${debt.id}')\">\n                            <i class=\"fas fa-edit\"></i>\n                            <span>Edit</span>\n                        </button>\n                        <button class=\"btn\" onclick=\"deleteDebt('${debt.id}')\">\n                            <i class=\"fas fa-trash\"></i>\n                            <span>Delete</span>\n                        </button>\n                    </div>\n\n                    ${debt.paymentHistory && debt.paymentHistory.length > 0 ? `\n                    <div class=\"payment-history\">\n                        <div class=\"payment-history-title\">Recent Payments</div>\n                        ${debt.paymentHistory.slice(-3).reverse().map(payment => `\n                            <div class=\"payment-item\">\n                                <div class=\"payment-date\">${formatDate(payment.date)}</div>\n                                <div>\n                                    <div class=\"payment-amount\">${formatCurrency(payment.amount)}</div>\n                                    ${payment.notes ? `<div class=\"payment-principal\">${payment.notes}</div>` : ''}\n                                </div>\n                            </div>\n                        `).join('')}\n                    </div>\n                    ` : ''}\n                `;\n\n                debtsContainer.appendChild(debtCard);\n            });\n        }\n\n        function updateInvestmentAccountsList() {\n            const accountsList = document.getElementById('investment-accounts-list');\n            accountsList.innerHTML = '';\n\n            if (financeData.investmentAccounts.length === 0) {\n                accountsList.innerHTML = `\n                    <tr>\n                        <td colspan=\"4\" class=\"empty-state\">\n                            <i class=\"fas fa-chart-line\"></i>\n                            <p>No investment accounts added yet</p>\n                        </td>\n                    </tr>\n                `;\n                return;\n            }\n\n            financeData.investmentAccounts.forEach(account => {\n                const row = document.createElement('tr');\n                row.innerHTML = `\n                    <td>${account.name}</td>\n                    <td>${formatAccountType(account.type)}</td>\n                    <td>${formatCurrency(account.value)}</td>\n                    <td>\n                        <button class=\"action-btn\" onclick=\"openModal('investment-account', '${account.id}')\">\n                            <i class=\"fas fa-edit\"></i>\n                        </button>\n                        <button class=\"action-btn\" onclick=\"deleteInvestmentAccount('${account.id}')\">\n                            <i class=\"fas fa-trash\"></i>\n                        </button>\n                    </td>\n                `;\n                accountsList.appendChild(row);\n            });\n        }\n\n        function updateInvestmentsList() {\n            const investmentsList = document.getElementById('investments-list');\n            investmentsList.innerHTML = '';\n\n            // Update investment stats\n            const portfolioValue = calculateInvestmentsValue();\n            const holdingsCount = financeData.investments.length;\n\n            // Calculate gain/loss (simplified - would need purchase price data for real calculation)\n            const investmentGain = portfolioValue - financeData.investmentAccounts.reduce((total, account) => total + account.value, 0);\n\n            document.getElementById('portfolio-value').textContent = formatCurrency(portfolioValue);\n            document.getElementById('investment-gain').textContent = `${investmentGain >= 0 ? '+' : ''}${formatCurrency(investmentGain)}`;\n            document.getElementById('investment-gain').style.color = investmentGain >= 0 ? 'var(--success)' : 'var(--danger)';\n            document.getElementById('holdings-count').textContent = holdingsCount;\n\n            if (financeData.investments.length === 0) {\n                investmentsList.innerHTML = `\n                    <tr>\n                        <td colspan=\"5\" class=\"empty-state\">\n                            <i class=\"fas fa-coins\"></i>\n                            <p>No investments added yet</p>\n                        </td>\n                    </tr>\n                `;\n                return;\n            }\n\n            financeData.investments.forEach(investment => {\n                const account = financeData.investmentAccounts.find(a => a.id === investment.accountId) || { name: 'Unknown' };\n                const value = investment.quantity * investment.price;\n\n                const row = document.createElement('tr');\n                row.innerHTML = `\n                    <td>${investment.name}</td>\n                    <td>${investment.symbol || '-'}</td>\n                    <td>${investment.quantity}</td>\n                    <td>${formatCurrency(value)}</td>\n                    <td>\n                        <button class=\"action-btn\" onclick=\"openModal('investment', '${investment.id}')\">\n                            <i class=\"fas fa-edit\"></i>\n                        </button>\n                        <button class=\"action-btn\" onclick=\"deleteInvestment('${investment.id}')\">\n                            <i class=\"fas fa-trash\"></i>\n                        </button>\n                    </td>\n                `;\n                investmentsList.appendChild(row);\n            });\n        }\n\n        function updateSavingsList() {\n            const savingsList = document.getElementById('savings-list');\n            savingsList.innerHTML = '';\n\n            // Update savings stats\n            const totalSaved = financeData.savingsGoals.reduce((total, goal) => total + goal.saved, 0);\n            const thisMonthSaved = 0; // This would need to track monthly contributions\n            const completedGoals = financeData.savingsGoals.filter(goal => goal.saved >= goal.target).length;\n\n            document.getElementById('total-saved').textContent = formatCurrency(totalSaved);\n            document.getElementById('savings-this-month').textContent = formatCurrency(thisMonthSaved);\n            document.getElementById('completed-goals').textContent = completedGoals;\n\n            if (financeData.savingsGoals.length === 0) {\n                savingsList.innerHTML = `\n                    <tr>\n                        <td colspan=\"4\" class=\"empty-state\">\n                            <i class=\"fas fa-piggy-bank\"></i>\n                            <p>No savings goals added yet</p>\n                        </td>\n                    </tr>\n                `;\n                return;\n            }\n\n            financeData.savingsGoals.forEach(goal => {\n                const progress = Math.min(100, (goal.saved / goal.target) * 100);\n                const progressClass = progress >= 100 ? 'success' : progress >= 75 ? 'warning' : 'primary';\n\n                const row = document.createElement('tr');\n                row.innerHTML = `\n                    <td>${goal.name}</td>\n                    <td>${formatCurrency(goal.target)}</td>\n                    <td>\n                        <div style=\"display: flex; align-items: center; gap: 0.5rem;\">\n                            <div style=\"flex: 1; height: 0.5rem; background: var(--primary-light); border-radius: var(--radius-sm); overflow: hidden;\">\n                                <div style=\"height: 100%; width: ${progress}%; background: var(--${progressClass});\"></div>\n                            </div>\n                            <span>${progress.toFixed(0)}%</span>\n                        </div>\n                    </td>\n                    <td>\n                        <button class=\"action-btn\" onclick=\"openModal('savings', '${goal.id}')\">\n                            <i class=\"fas fa-edit\"></i>\n                        </button>\n                        <button class=\"action-btn\" onclick=\"deleteSavingsGoal('${goal.id}')\">\n                            <i class=\"fas fa-trash\"></i>\n                        </button>\n                    </td>\n                `;\n                savingsList.appendChild(row);\n            });\n        }\n\n        // Helper functions\n        function formatDate(dateString) {\n            const date = new Date(dateString);\n            return date.toLocaleDateString();\n        }\n\n        function formatTime(timeString) {\n            if (!timeString) return 'N/A';\n            const [hours, minutes] = timeString.split(':');\n            const hour = parseInt(hours);\n            const period = hour >= 12 ? 'PM' : 'AM';\n            const displayHour = hour % 12 || 12;\n            return `${displayHour}:${minutes} ${period}`;\n        }\n\n        // Enhanced formatDebtType function to handle custom types\n        function formatDebtType(type) {\n            const types = {\n                'credit-card': 'Credit Card',\n                'mortgage': 'Mortgage',\n                'student-loan': 'Student Loan',\n                'car-loan': 'Car Loan',\n                'personal-loan': 'Personal Loan',\n                'other': 'Other'\n            };\n            return types[type] || type;\n        }\n\n        // Enhanced formatAccountType function to handle custom types\n        function formatAccountType(type) {\n            const types = {\n                'brokerage': 'Brokerage',\n                'ira': 'IRA',\n                'roth-ira': 'Roth IRA',\n                '401k': '401(k)',\n                'hsa': 'HSA',\n                'other': 'Other'\n            };\n            return types[type] || type;\n        }\n\n        // Data management functions\n        function saveEmployer(id) {\n            const name = document.getElementById('employer-name').value;\n            const paySchedule = document.getElementById('pay-schedule').value;\n            const baseRate = parseFloat(document.getElementById('base-rate').value);\n\n            if (id) {\n                // Update existing employer\n                const index = financeData.employers.findIndex(e => e.id === id);\n                if (index !== -1) {\n                    financeData.employers[index] = { id, name, paySchedule, baseRate };\n                }\n            } else {\n                // Add new employer\n                const newEmployer = {\n                    id: Date.now().toString(),\n                    name,\n                    paySchedule,\n                    baseRate\n                };\n                financeData.employers.push(newEmployer);\n            }\n\n            saveData();\n            updateUI();\n        }\n\n        function deleteEmployer(id) {\n            financeData.employers = financeData.employers.filter(e => e.id !== id);\n            // Also remove associated pay runs and shifts\n            financeData.payRuns = financeData.payRuns.filter(p => p.employerId !== id);\n            financeData.shifts = financeData.shifts.filter(s => s.employerId !== id);\n            saveData();\n            updateUI();\n        }\n\n        function savePayRun(id) {\n            const employerId = document.getElementById('payrun-employer').value;\n            const periodStart = document.getElementById('payrun-period-start').value;\n            const periodEnd = document.getElementById('payrun-period-end').value;\n            const grossPay = parseFloat(document.getElementById('payrun-gross').value);\n            const netPay = parseFloat(document.getElementById('payrun-net').value);\n\n            if (id) {\n                // Update existing pay run\n                const index = financeData.payRuns.findIndex(p => p.id === id);\n                if (index !== -1) {\n                    financeData.payRuns[index] = { id, employerId, periodStart, periodEnd, grossPay, netPay };\n                }\n            } else {\n                // Add new pay run\n                const newPayRun = {\n                    id: Date.now().toString(),\n                    employerId,\n                    periodStart,\n                    periodEnd,\n                    grossPay,\n                    netPay\n                };\n                financeData.payRuns.push(newPayRun);\n            }\n\n            saveData();\n            updateUI();\n        }\n\n        function deletePayRun(id) {\n            financeData.payRuns = financeData.payRuns.filter(p => p.id !== id);\n            saveData();\n            updateUI();\n        }\n\n        function saveShift(id) {\n            const date = document.getElementById('shift-date').value;\n            const startTime = document.getElementById('shift-start-time').value;\n            const endTime = document.getElementById('shift-end-time').value;\n            const breakMinutes = parseInt(document.getElementById('shift-break').value) || 0;\n            const employerId = document.getElementById('shift-employer').value || null;\n            const role = document.getElementById('shift-role').value || '';\n            const rate = parseFloat(document.getElementById('shift-rate').value);\n            const tips = parseFloat(document.getElementById('shift-tips').value) || 0;\n            const location = document.getElementById('shift-location').value || '';\n            const notes = document.getElementById('shift-notes').value || '';\n\n            // Calculate hours based on start/end times and break\n            let hours = 0;\n            if (startTime && endTime) {\n                const [startHours, startMins] = startTime.split(':').map(Number);\n                const [endHours, endMins] = endTime.split(':').map(Number);\n\n                let startTotalMinutes = startHours * 60 + startMins;\n                let endTotalMinutes = endHours * 60 + endMins;\n\n                // Handle overnight shifts\n                if (endTotalMinutes < startTotalMinutes) {\n                    endTotalMinutes += 24 * 60;\n                }\n\n                hours = (endTotalMinutes - startTotalMinutes - breakMinutes) / 60;\n                hours = Math.max(0, hours); // Ensure non-negative\n            }\n\n            if (id) {\n                // Update existing shift\n                const index = financeData.shifts.findIndex(s => s.id === id);\n                if (index !== -1) {\n                    financeData.shifts[index] = { \n                        id, date, startTime, endTime, breakMinutes, \n                        employerId, role, rate, tips, location, notes, hours \n                    };\n                }\n            } else {\n                // Add new shift\n                const newShift = {\n                    id: Date.now().toString(),\n                    date,\n                    startTime,\n                    endTime,\n                    breakMinutes,\n                    employerId,\n                    role,\n                    rate,\n                    tips,\n                    location,\n                    notes,\n                    hours\n                };\n                financeData.shifts.push(newShift);\n            }\n\n            saveData();\n            updateUI();\n        }\n\n        function deleteShift(id) {\n            financeData.shifts = financeData.shifts.filter(s => s.id !== id);\n            saveData();\n            updateUI();\n        }\n\n        // Enhanced saveDebt function to handle custom types\n        function saveDebt(id) {\n            const lender = document.getElementById('debt-lender').value;\n            let type = document.getElementById('debt-type').value;\n            const balance = parseFloat(document.getElementById('debt-balance').value);\n            const limit = parseFloat(document.getElementById('debt-limit').value);\n            const apr = parseFloat(document.getElementById('debt-apr').value);\n            const minPayment = parseFloat(document.getElementById('debt-min-payment').value);\n            const dueDate = parseInt(document.getElementById('debt-due-date').value);\n\n            // Handle custom type\n            if (type === 'other') {\n                const customType = document.getElementById('debt-custom-type').value.trim();\n                type = customType || 'other';\n            }\n\n            if (id) {\n                // Update existing debt\n                const index = financeData.debts.findIndex(d => d.id === id);\n                if (index !== -1) {\n                    // Preserve payment history\n                    const paymentHistory = financeData.debts[index].paymentHistory || [];\n                    financeData.debts[index] = { id, lender, type, balance, limit, apr, minPayment, dueDate, paymentHistory };\n                }\n            } else {\n                // Add new debt\n                const newDebt = {\n                    id: Date.now().toString(),\n                    lender,\n                    type,\n                    balance,\n                    limit,\n                    apr,\n                    minPayment,\n                    dueDate,\n                    paymentHistory: []\n                };\n                financeData.debts.push(newDebt);\n            }\n\n            saveData();\n            updateUI();\n        }\n\n        function deleteDebt(id) {\n            financeData.debts = financeData.debts.filter(d => d.id !== id);\n            saveData();\n            updateUI();\n        }\n\n        // Enhanced saveInvestmentAccount function to handle custom types\n        function saveInvestmentAccount(id) {\n            const name = document.getElementById('account-name').value;\n            let type = document.getElementById('account-type').value;\n            const value = parseFloat(document.getElementById('account-value').value);\n\n            // Handle custom type\n            if (type === 'other') {\n                const customType = document.getElementById('account-custom-type').value.trim();\n                type = customType || 'other';\n            }\n\n            if (id) {\n                // Update existing account\n                const index = financeData.investmentAccounts.findIndex(a => a.id === id);\n                if (index !== -1) {\n                    financeData.investmentAccounts[index] = { id, name, type, value };\n                }\n            } else {\n                // Add new account\n                const newAccount = {\n                    id: Date.now().toString(),\n                    name,\n                    type,\n                    value\n                };\n                financeData.investmentAccounts.push(newAccount);\n            }\n\n            saveData();\n            updateUI();\n        }\n\n        function deleteInvestmentAccount(id) {\n            financeData.investmentAccounts = financeData.investmentAccounts.filter(a => a.id !== id);\n            // Also remove associated investments\n            financeData.investments = financeData.investments.filter(i => i.accountId !== id);\n            saveData();\n            updateUI();\n        }\n\n        function saveInvestment(id) {\n            const accountId = document.getElementById('investment-account').value;\n            const name = document.getElementById('investment-name').value;\n            const symbol = document.getElementById('investment-symbol').value;\n            const quantity = parseFloat(document.getElementById('investment-quantity').value);\n            const price = parseFloat(document.getElementById('investment-price').value);\n\n            if (id) {\n                // Update existing investment\n                const index = financeData.investments.findIndex(i => i.id === id);\n                if (index !== -1) {\n                    financeData.investments[index] = { id, accountId, name, symbol, quantity, price };\n                }\n            } else {\n                // Add new investment\n                const newInvestment = {\n                    id: Date.now().toString(),\n                    accountId,\n                    name,\n                    symbol,\n                    quantity,\n                    price\n                };\n                financeData.investments.push(newInvestment);\n            }\n\n            saveData();\n            updateUI();\n        }\n\n        function deleteInvestment(id) {\n            financeData.investments = financeData.investments.filter(i => i.id !== id);\n            saveData();\n            updateUI();\n        }\n\n        function saveSavingsGoal(id) {\n            const name = document.getElementById('savings-goal').value;\n            const target = parseFloat(document.getElementById('savings-target').value);\n            const saved = parseFloat(document.getElementById('savings-saved').value);\n            const deadline = document.getElementById('savings-deadline').value;\n\n            if (id) {\n                // Update existing goal\n                const index = financeData.savingsGoals.findIndex(g => g.id === id);\n                if (index !== -1) {\n                    financeData.savingsGoals[index] = { id, name, target, saved, deadline };\n                }\n            } else {\n                // Add new goal\n                const newGoal = {\n                    id: Date.now().toString(),\n                    name,\n                    target,\n                    saved,\n                    deadline\n                };\n                financeData.savingsGoals.push(newGoal);\n            }\n\n            saveData();\n            updateUI();\n        }\n\n        function deleteSavingsGoal(id) {\n            financeData.savingsGoals = financeData.savingsGoals.filter(g => g.id !== id);\n            saveData();\n            updateUI();\n        }\n\n// Initialize the app when the DOM is loaded\n        document.addEventListener('DOMContentLoaded', initApp);\n    </script>\n</body>\n\n\n\n<?php require 'app/views/templates/footer.php'; ?>\n","size_bytes":93453},"app/views/home/index.php":{"content":"<?php require_once 'app/views/templates/header.php' ?>\r\n<div class=\"container\">\r\n    <div class=\"page-header\" id=\"banner\">\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-12\">\r\n                <h1>Hey</h1>\r\n                <p class=\"lead\"> <?= date(\"F jS, Y\"); ?></p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n        <div class=\"col-lg-12\">\r\n            <p> <a href=\"/logout\">Click here to logout</a></p>\r\n        </div>\r\n    </div>\r\n\r\n    <?php require_once 'app/views/templates/footer.php' ?>\r\n","size_bytes":540},"app/views/login/index.php":{"content":"<?php require_once 'app/views/templates/headerPublic.php'?>\n<main role=\"main\" class=\"container\">\n    <div class=\"page-header\" id=\"banner\">\n        <div class=\"row\">\n            <div class=\"col-lg-12\">\n                <h1>You are not logged in</h1>\n            </div>\n        </div>\n    </div>\n\n<div class=\"row\">\n    <div class=\"col-sm-auto\">\n\t\t<form action=\"/login/verify\" method=\"post\" >\n\t\t<fieldset>\n\t\t\t<div class=\"form-group\">\n\t\t\t\t<label for=\"email\">Email</label>\n\t\t\t\t<input required type=\"email\" class=\"form-control\" name=\"email\">\n\t\t\t</div>\n\t\t\t<div class=\"form-group\">\n\t\t\t\t<label for=\"password\">Password</label>\n\t\t\t\t<input required type=\"password\" class=\"form-control\" name=\"password\">\n\t\t\t</div>\n            <br>\n\t\t    <button type=\"submit\" class=\"btn btn-primary\">Login</button>\n\t\t\t<p class=\"mt-3\">No account yet? <a href=\"/register\">Create one</a>.</p>\n\n\t\t</fieldset>\n\t\t</form> \n\t</div>\n</div>\n    <?php require_once 'app/views/templates/footer.php' ?>\n","size_bytes":959},"app/views/register/index.php":{"content":"<?php require 'app/views/templates/headerPublic.php'; ?>\n<div class=\"container mt-4\" style=\"max-width: 560px;\">\n  <h3 class=\"mb-3\">Create your account</h3>\n\n  <?php if (!empty($_SESSION['flash_error'])): ?>\n    <div class=\"alert alert-danger\"><?= htmlspecialchars($_SESSION['flash_error']); unset($_SESSION['flash_error']); ?></div>\n  <?php endif; ?>\n\n  <form method=\"post\" action=\"/register/store\" autocomplete=\"off\">\n    <?= function_exists('csrf_field') ? csrf_field() : '' ?>\n    <div class=\"mb-3\">\n      <label class=\"form-label\">Full name</label>\n      <input type=\"text\" name=\"name\" class=\"form-control\" maxlength=\"120\" required>\n    </div>\n    <div class=\"mb-3\">\n      <label class=\"form-label\">Email</label>\n      <input type=\"email\" name=\"email\" class=\"form-control\" maxlength=\"190\" required>\n    </div>\n    <div class=\"mb-3\">\n      <label class=\"form-label\">Password <span class=\"text-muted\">(min 8 chars)</span></label>\n      <input type=\"password\" name=\"password\" class=\"form-control\" minlength=\"8\" required>\n    </div>\n    <div class=\"mb-3\">\n      <label class=\"form-label\">Confirm password</label>\n      <input type=\"password\" name=\"password_confirm\" class=\"form-control\" minlength=\"8\" required>\n    </div>\n\n    <div class=\"d-grid gap-2\">\n      <button class=\"btn btn-primary\" type=\"submit\">Create account</button>\n      <a class=\"btn btn-outline-secondary\" href=\"/login\">Back to login</a>\n    </div>\n  </form>\n\n  <p class=\"text-muted small mt-3 mb-0\">\n    By creating an account you agree to our terms of use.\n  </p>\n</div>\n<?php require 'app/views/templates/footer.php'; ?>\n","size_bytes":1591},"app/views/templates/footer.php":{"content":"<footer class=\"footer\">    \r\n    <div class=\"row\">\r\n        <div class=\"col-lg-12\">\r\n            <p>Copyright &copy; <?php echo date('Y'); ?> </p>\r\n        </div>\r\n    </div>\r\n</footer>\r\n\r\n</div>\r\n\r\n<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p\" crossorigin=\"anonymous\"></script>\r\n</body>\r\n</html>","size_bytes":425},"app/views/templates/header.php":{"content":"<?php\nif (!isset($_SESSION['auth'])) {\n    header('Location: /login');\n    exit;\n}\n$ctrl   = $_SESSION['controller'] ?? '';\n$method = $_SESSION['method'] ?? '';\n$active = function(string $c, ?string $m = null) use ($ctrl, $method) {\n    if ($m === null) return $ctrl === $c ? ' active' : '';\n    return ($ctrl === $c && $method === $m) ? ' active' : '';\n};\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title><?= isset($title) ? htmlspecialchars($title) . ' — ' : '' ?>LifeNav</title>\n    <meta name=\"viewport\" content=\"width=device-width\">\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n    <meta name=\"mobile-web-app-capable\" content=\"yes\">\n    <link rel=\"icon\" href=\"/favicon.png\">\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\"\n          rel=\"stylesheet\"\n          integrity=\"sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3\"\n          crossorigin=\"anonymous\">\n</head>\n<body>\n<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n  <div class=\"container-fluid\">\n    <a class=\"navbar-brand\" href=\"/home\">LifeNav</a>\n\n    <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\"\n            data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span class=\"navbar-toggler-icon\"></span>\n    </button>\n\n    <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n      <!-- Left -->\n      <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\n\n        <li class=\"nav-item\">\n          <a class=\"nav-link<?= $active('home') ?>\" href=\"/home\">Home</a>\n        </li>\n\n\n        <!-- Essentials module -->\n        <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\n\n        <li class=\"nav-item\">\n          <a class=\"nav-link<?= $active('essentials') ?>\" href=\"/essentials\">Essentials</a>\n        </li>\n\n          <li class=\"nav-item\">\n            <a class=\"nav-link<?= $active('finance') ?>\" href=\"/finance\">Finance</a>\n          </li>\n\n      <!-- Right -->\n      <div class=\"d-flex align-items-center\">\n        <span class=\"navbar-text me-2\">\n          <?= htmlspecialchars($_SESSION['auth']['name'] ?? ($_SESSION['auth']['email'] ?? '')) ?>\n        </span>\n        <a class=\"btn btn-outline-secondary btn-sm\" href=\"/logout\">Logout</a>\n      </div>\n    </div>\n  </div>\n</nav>\n","size_bytes":2467},"app/views/templates/headerPublic.php":{"content":"<?php\nif (isset($_SESSION['auth']) == 1) {\n    header('Location: /home');\n}\n?>\n\n<!DOCTYPE html>\n<html lang=\"en\">\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3\" crossorigin=\"anonymous\">\n    <link rel=\"icon\" href=\"/favicon.png\">\n    <title>COSC 4806</title>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width\">\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n    <meta name=\"mobile-web-app-capable\" content=\"yes\">\n</head>\n<body>","size_bytes":612}},"version":1}