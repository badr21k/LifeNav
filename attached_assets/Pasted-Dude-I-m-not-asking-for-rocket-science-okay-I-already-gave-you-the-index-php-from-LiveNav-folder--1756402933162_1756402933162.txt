Dude, I'm not asking for rocket science, okay? I already gave you the index.php from LiveNav folder. You see how it looks? It's great. So, what is it gonna have? It's gonna have categories. It's gonna have transportation, accommodation, and... and entertainment, health, essential and non-essentials, okay? And each one of them is gonna have what I explained to you earlier. So, I'm not asking for rocket science. Can you please help me fucking make it? And you made me so many fucking files  I'm pretty sure I don't need all of them. I just want this fucking tab to work. So, i removed the magority let's start again,tell me what to add, and it should work. And you already know how my database looks like. So, just fucking make things work.


app/views/lifenav/index.php:

<?php require 'app/views/templates/header.php'; ?>

<div class="container mt-3">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <div>
            <h3 class="m-0">LifeNav</h3>
            <div class="btn-group" role="group" aria-label="Mode Selection">
                <a href="/lifenav/normal" class="btn <?= $mode === 'normal' ? 'btn-primary' : 'btn-outline-primary' ?>">Normal</a>
                <a href="/lifenav/travel" class="btn <?= $mode === 'travel' ? 'btn-primary' : 'btn-outline-primary' ?>">Travel</a>
            </div>
        </div>
        <div class="d-flex align-items-center gap-2">
            <form method="post" action="/lifenav/switch_currency" class="d-inline-flex align-items-center gap-2">
                <?= csrf_field() ?>
                <label class="form-label mb-0">Currency:</label>
                <input type="text" name="currency" value="<?= htmlspecialchars($currency) ?>" maxlength="3" class="form-control form-control-sm" style="width: 70px;">
                <button type="submit" class="btn btn-sm btn-outline-secondary">Switch</button>
            </form>
            <a href="/lifenav/reports/monthly?mode=<?= $mode ?>" class="btn btn-outline-info btn-sm">Reports</a>
        </div>
    </div>

    <?php if (!empty($_SESSION['flash_error'])): ?>
        <div class="alert alert-danger"><?= htmlspecialchars($_SESSION['flash_error']); unset($_SESSION['flash_error']); ?></div>
    <?php endif; ?>
    <?php if (!empty($_SESSION['flash_ok'])): ?>
        <div class="alert alert-success"><?= htmlspecialchars($_SESSION['flash_ok']); unset($_SESSION['flash_ok']); ?></div>
    <?php endif; ?>

    <?php foreach ($tabs as $tab): ?>
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0"><?= htmlspecialchars($tab['name']) ?></h5>
            </div>
            <div class="card-body">
                <?php
                $categories = [];
                $st = db()->prepare("SELECT * FROM categories WHERE tab_id = ? AND (is_custom = 0 OR user_id = ?) AND active = 1 ORDER BY is_custom, name");
                $st->execute([$tab['id'], $userId]);
                $categories = $st->fetchAll();
                
                $userRowsForTab = $rowsByTab[$tab['id']] ?? [];
                $activeCategories = array_column($userRowsForTab, 'category_id');
                ?>
                
                <div class="row g-2">
                    <?php foreach ($categories as $category): ?>
                        <?php $isActive = in_array($category['id'], $activeCategories); ?>
                        <?php if ($isActive): ?>
                            <?php
                            $userRow = array_filter($userRowsForTab, fn($r) => $r['category_id'] == $category['id'])[0];
                            $total = number_format($userRow['current_total_cents'] / 100, 2);
                            ?>
                            <div class="col-auto">
                                <a href="/lifenav/category/<?= $userRow['id'] ?>" class="btn btn-success position-relative">
                                    <?= htmlspecialchars($category['name']) ?>
                                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-light text-dark">
                                        <?= $total ?> <?= htmlspecialchars($currency) ?>
                                    </span>
                                </a>
                            </div>
                        <?php else: ?>
                            <div class="col-auto">
                                <form method="post" action="/lifenav/select_category" class="d-inline">
                                    <?= csrf_field() ?>
                                    <input type="hidden" name="mode" value="<?= htmlspecialchars($mode) ?>">
                                    <input type="hidden" name="tab_id" value="<?= $tab['id'] ?>">
                                    <input type="hidden" name="category_id" value="<?= $category['id'] ?>">
                                    <button type="submit" class="btn btn-outline-secondary">
                                        <?= htmlspecialchars($category['name']) ?>
                                    </button>
                                </form>
                            </div>
                        <?php endif; ?>
                    <?php endforeach; ?>
                </div>
            </div>
        </div>
    <?php endforeach; ?>
</div>

<?php require 'app/views/templates/footer.php'; ?>



app/core/database.php:

<?php

function db(): PDO {
    static $pdo = null;
    
    if ($pdo === null) {
        $host = DB_HOST;
        $dbname = DB_DATABASE;
        $username = DB_USER;
        $password = DB_PASS;
        $port = DB_PORT;
        
        $dsn = "mysql:host=$host;port=$port;dbname=$dbname;charset=utf8mb4";
        
        $options = [
            PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
            PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
            PDO::ATTR_EMULATE_PREPARES => false,
        ];
        
        $pdo = new PDO($dsn, $username, $password, $options);
    }
    
    return $pdo;
}


app/controllers/mode.php:
<?php
class mode extends Controller {

  private function db(){ return db_connect(); }
  private function user(){
    if (!isset($_SESSION['auth'])) { header('Location: /login'); exit; }
    $st=$this->db()->prepare("SELECT * FROM users WHERE id=? LIMIT 1");
    $st->execute([$_SESSION['auth']['id']]); return $st->fetch();
  }

  /* ---- entry points ---- */
  public function normal(){ $this->tabs('normal'); }
  public function travel(){ $this->tabs('travel'); }

  // list tabs
  private function tabs($mode){
    $u=$this->user(); $this->rolloverIfNeeded($u);
    $st=$this->db()->prepare("SELECT * FROM app_tabs WHERE mode=? AND is_active=1 ORDER BY sort,id");
    $st->execute([$mode]); $tabs=$st->fetchAll();
    $title = ucfirst($mode).' mode';
    include 'app/views/mode/index.php';
  }

  // GET /mode/tab/{mode}/{tab_id}
  public function tab($mode,$tabId){
    $u=$this->user(); $this->rolloverIfNeeded($u);
    $dbh=$this->db();

    $t=$dbh->prepare("SELECT * FROM app_tabs WHERE id=? AND mode=? AND is_active=1");
    $t->execute([(int)$tabId,$mode]); $tab=$t->fetch();
    if(!$tab){ http_response_code(404); $title='Not found'; include 'app/views/errors/404.php'; return; }

    $c=$dbh->prepare("SELECT * FROM app_categories WHERE tab_id=? AND is_active=1 AND (user_id=0 OR user_id=?) ORDER BY is_custom,name");
    $c->execute([(int)$tabId,(int)$u['id']]); $categories=$c->fetchAll();

    $title = ucfirst($mode).' â€” '.$tab['name'];
    include 'app/views/mode/tab.php';
  }

  // POST /mode/select/{mode}/{tab_id}/{category_id}
  public function select($mode,$tabId,$categoryId){
    $u=$this->user(); csrf_verify();
    $dbh=$this->db(); $dbh->beginTransaction();
    try{
      // validate
      $s=$dbh->prepare("SELECT 1 FROM app_tabs WHERE id=? AND mode=? AND is_active=1"); $s->execute([(int)$tabId,$mode]);
      if(!$s->fetch()) throw new Exception('bad tab');
      $s=$dbh->prepare("SELECT * FROM app_categories WHERE id=? AND tab_id=? AND is_active=1 AND (user_id=0 OR user_id=?)");
      $s->execute([(int)$categoryId,(int)$tabId,(int)$u['id']]); $cat=$s->fetch();
      if(!$cat) throw new Exception('bad category');

      // ensure persistent row
      $ym=(new DateTime('now', new DateTimeZone($u['tz'])))->format('Y-m');
      $q=$dbh->prepare("SELECT * FROM app_user_category_rows WHERE user_id=? AND mode=? AND tab_id=? AND category_id=? FOR UPDATE");
      $q->execute([(int)$u['id'],$mode,(int)$tabId,(int)$categoryId]); $row=$q->fetch();
      if(!$row){
        $ins=$dbh->prepare("INSERT INTO app_user_category_rows (user_id,mode,tab_id,category_id,is_active,open_month_ym,current_total_cents,current_entry_count,lifetime_total_cents,lifetime_entry_count) VALUES (?,?,?,?,1,?,0,0,0,0)");
        $ins->execute([(int)$u['id'],$mode,(int)$tabId,(int)$categoryId,$ym]);
        $rowId=(int)$dbh->lastInsertId();
      }else{
        $rowId=(int)$row['id'];
        if(!(int)$row['is_active']) $dbh->prepare("UPDATE app_user_category_rows SET is_active=1 WHERE id=?")->execute([$rowId]);
      }
      $dbh->commit();
      header("Location: /mode/category/$mode/$rowId"); exit;
    }catch(Throwable $e){
      if($dbh->inTransaction()) $dbh->rollBack();
      $_SESSION['flash_error']='Could not select category.'; header("Location: /mode/tab/$mode/$tabId"); exit;
    }
  }

  // GET /mode/category/{mode}/{row_id}
  public function category($mode,$rowId){
    $u=$this->user(); $this->rolloverIfNeeded($u);
    $dbh=$this->db();
    $st=$dbh->prepare("SELECT r.*,t.name AS tab_name,c.name AS category_name FROM app_user_category_rows r JOIN app_tabs t ON t.id=r.tab_id JOIN app_categories c ON c.id=r.category_id WHERE r.id=? AND r.user_id=? AND r.mode=?");
    $st->execute([(int)$rowId,(int)$u['id'],$mode]); $row=$st->fetch();
    if(!$row){ http_response_code(404); $title='Not found'; include 'app/views/errors/404.php'; return; }

    $h=$dbh->prepare("SELECT * FROM app_entries WHERE row_id=? ORDER BY id DESC LIMIT 20");
    $h->execute([(int)$rowId]); $entries=$h->fetchAll();

    $title=$row['tab_name'].' â€” '.$row['category_name'];
    include 'app/views/mode/category.php';
  }

  // POST /mode/add/{row_id}
  public function add($rowId){
    $u=$this->user(); csrf_verify();
    $dbh=$this->db(); $dbh->beginTransaction();
    try{
      $r=$dbh->prepare("SELECT * FROM app_user_category_rows WHERE id=? AND user_id=? FOR UPDATE");
      $r->execute([(int)$rowId,(int)$u['id']]); $row=$r->fetch();
      if(!$row) throw new Exception('row');

      $amountStr=trim($_POST['amount']??''); $memo=mb_substr(trim($_POST['memo']??''),0,255);
      $date=trim($_POST['date']??'');
      $amountCents=$this->toCents($amountStr);
      if($amountCents===null || $amountCents<=0) throw new Exception('amount');

      $tz=new DateTimeZone($u['tz']); $now=new DateTime('now',$tz);
      if($date!==''){
        if(!preg_match('/^\d{4}-\d{2}-\d{2}$/',$date) || substr($date,0,7)!==$row['open_month_ym']) throw new Exception('date');
        $localDate=$date; $tsLocal=new DateTime($date.' 12:00:00',$tz);
      }else{ $localDate=$now->format('Y-m-d'); $tsLocal=$now; }

      $tsUtc=(clone $tsLocal)->setTimezone(new DateTimeZone('UTC'));
      $cur=$u['active_currency']; $idem=$_POST['idem'] ?? bin2hex(random_bytes(8));

      $ins=$dbh->prepare("INSERT IGNORE INTO app_entries (row_id,user_id,ts_utc,local_date,amount_cents,currency,memo,source,idempotency_key) VALUES (?,?,?,?,?,?,?,'ui',?)");
      $ins->execute([(int)$row['id'],(int)$u['id'],$tsUtc->format('Y-m-d H:i:s'),$localDate,$amountCents,$cur,$memo,$idem]);

      if($ins->rowCount()>0){
        $dbh->prepare("UPDATE app_user_category_rows SET current_total_cents=current_total_cents+?, current_entry_count=current_entry_count+1, lifetime_total_cents=lifetime_total_cents+?, lifetime_entry_count=lifetime_entry_count+1, current_currency=?, last_entry_at=UTC_TIMESTAMP() WHERE id=?")
            ->execute([$amountCents,$amountCents,$cur,(int)$row['id']]);
      }
      $dbh->commit();
      $_SESSION['flash_ok']='Added.'; header("Location: /mode/category/".$row['mode']."/".$row['id']); exit;
    }catch(Throwable $e){
      if($dbh->inTransaction()) $dbh->rollBack();
      $_SESSION['flash_error']='Could not add entry.'; header("Location: /mode/category/".$row['mode']."/".$row['id']); exit;
    }
  }

  private function toCents($s){
    $s=trim(str_replace([',',' '],['',''],$s)); if($s===''||!preg_match('/^-?\d+(\.\d{1,2})?$/',$s)) return null;
    $neg=$s[0]==='-'; if($neg) $s=substr($s,1);
    if(strpos($s,'.')===false) $c=((int)$s)*100;
    else { list($w,$f)=explode('.',$s,2); $c=((int)$w)*100 + (int)str_pad(substr($f,0,2),2,'0'); }
    return $neg ? -$c : $c;
  }

  /* ---- month roll-over & snapshots ---- */
  private function rolloverIfNeeded($user){
    $dbh=$this->db(); $tz=new DateTimeZone($user['tz']); $now=new DateTime('now',$tz); $curYm=$now->format('Y-m');
    $rs=$dbh->prepare("SELECT * FROM app_user_category_rows WHERE user_id=? AND open_month_ym<>?");
    $rs->execute([(int)$user['id'],$curYm]); $rows=$rs->fetchAll(); if(!$rows) return;

    foreach($rows as $r){
      $startLocal=DateTime::createFromFormat('Y-m-d H:i:s',$r['open_month_ym'].'-01 00:00:00',$tz);
      $endLocal=(clone $startLocal)->modify('+1 month');
      $startUtc=(clone $startLocal)->setTimezone(new DateTimeZone('UTC'));
      $endUtc=(clone $endLocal)->setTimezone(new DateTimeZone('UTC'));

      $sum=$dbh->prepare("SELECT currency,SUM(amount_cents) total_cents,COUNT(*) cnt FROM app_entries WHERE row_id=? AND ts_utc>=? AND ts_utc<? GROUP BY currency");
      $sum->execute([(int)$r['id'],$startUtc->format('Y-m-d H:i:s'),$endUtc->format('Y-m-d H:i:s')]); $curTotals=$sum->fetchAll();

      $total=0; $cnt=0; $pred=null; $predVal=-1;
      foreach($curTotals as $ct){ $total+=(int)$ct['total_cents']; $cnt+=(int)$ct['cnt']; if((int)$ct['total_cents']>$predVal){$predVal=(int)$ct['total_cents'];$pred=$ct['currency'];}}

      $dbh->prepare("INSERT INTO app_monthly_snapshots (row_id,user_id,mode,tab_id,category_id,month_start,month_end,total_cents,predominant_currency,entry_count)
                     VALUES (?,?,?,?,?,?,?,?,?,?)
                     ON DUPLICATE KEY UPDATE total_cents=VALUES(total_cents), predominant_currency=VALUES(predominant_currency), entry_count=VALUES(entry_count)")
          ->execute([(int)$r['id'],(int)$user['id'],$r['mode'],(int)$r['tab_id'],(int)$_]()]()


app/models/User.php:
<?php

class User {

    public $username;
    public $password;
    public $auth = false;

    public function __construct() {
        
    }

    public function test () {
      $db = db_connect();
      $statement = $db->prepare("select * from users;");
      $statement->execute();
      $rows = $statement->fetch(PDO::FETCH_ASSOC);
      return $rows;
    }

    public function authenticate($email, $password) {
        /*
         * if email and password good then
         * $this->auth = true;
         */
		$email = strtolower($email);
		$db = db_connect();
        $statement = $db->prepare("select * from users WHERE email = :email;");
        $statement->bindValue(':email', $email);
        $statement->execute();
        $rows = $statement->fetch(PDO::FETCH_ASSOC);

		if ($rows && password_verify($password, $rows['password_hash'])) {
			$_SESSION['auth'] = [
				'id' => $rows['id'],
				'tenant_id' => $rows['tenant_id'],
				'name' => $rows['name'],
				'email' => $rows['email'],
				'role' => $rows['role']
			];
			unset($_SESSION['failedAuth']);
			header('Location: /home');
			die;
		} else {
			if(isset($_SESSION['failedAuth'])) {
				$_SESSION['failedAuth'] ++; //increment
			} else {
				$_SESSION['failedAuth'] = 1;
			}
			header('Location: /login');
			die;
		}
    }

}

app/core/config.php:
<?php require_once 'app/views/templates/header.php' ?>
<div class="container">
    <div class="page-header" id="banner">
        <div class="row">
            <div class="col-lg-12">
                <h1>Hey</h1>
                <p class="lead"> <?= date("F jS, Y"); ?></p>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12">
            <p> <a href="/logout">Click here to logout</a></p>
        </div>
    </div>

    <?php require_once 'app/views/templates/footer.php' ?>


app/core/App.php:

<?php

class App {

    protected $controller = 'login';
    protected $method = 'index';
    protected $special_url = ['apply'];
    protected $params = [];

    public function __construct() {
        if (isset($_SESSION['auth']) == 1) {
            //$this->method = 'index';
            $this->controller = 'home';
        } 

        // This will return a broken up URL
        // it will be /controller/method
        $url = $this->parseUrl();

        /* if controller exists in the URL, then go to it
         * if not, then go to this->controller which is defaulted to home 
         */

        if (isset($url[1]) && file_exists('app/controllers/' . $url[1] . '.php')) {
            $this->controller = $url[1];

            $_SESSION['controller'] = $this->controller;

            /* This is if we have a special URL in the index.
             * For example, our apply page is public and in the index method
             * We do not want the method to be login in this case, but instead index
             * 
             */
            if (in_array($this->controller, $this->special_url)) { 
              $this->method = 'index';
            }
            unset($url[1]);
        } else {
            header('Location: /home');
            die;
        }

        require_once 'app/controllers/' . $this->controller . '.php';

        $this->controller = new $this->controller;

        // check to see if method is passed
        // check to see if it exists
        if (isset($url[2])) {
            if (method_exists($this->controller, $url[2])) {
                $this->method = $url[2];
                $_SESSION['method'] = $this->method;
                unset($url[2]);
            }
        }

        // This will rebase the params to a new array (starting at 0)
        // if params exist
        $this->params = $url ? array_values($url) : [];
        call_user_func_array([$this->controller, $this->method], $this->params);		
    }

    public function parseUrl() {
        $u = "{$_SERVER['REQUEST_URI']}";
        //trims the trailing forward slash (rtrim), sanitizes URL, explode it by forward slash to get elements
        $url = explode('/', filter_var(rtrim($u, '/'), FILTER_SANITIZE_URL));
		unset($url[0]);
		return $url;
    }

}

app/core/Controller.php:
<?php

class Controller {
    
    public function model ($model) {
        require_once 'app/models/' .$model . '.php';
        return new $model();
    }
    
    public function view ($view, $data = []) {
        require_once 'app/views/' . $view .'.php';
    }

}